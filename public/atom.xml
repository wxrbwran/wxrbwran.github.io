<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晓然的自留地</title>
  
  <subtitle>路漫漫，上下而求索</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-07-19T07:39:35.250Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>织幻z</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Cloud中关于@EnableFeignClients注解的属性字段basePackages</title>
    <link href="http://example.com/2021/07/19/Spring-Cloud%E4%B8%AD%E5%85%B3%E4%BA%8E-EnableFeignClients%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%B1%9E%E6%80%A7%E5%AD%97%E6%AE%B5basePackages/"/>
    <id>http://example.com/2021/07/19/Spring-Cloud%E4%B8%AD%E5%85%B3%E4%BA%8E-EnableFeignClients%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%B1%9E%E6%80%A7%E5%AD%97%E6%AE%B5basePackages/</id>
    <published>2021-07-19T07:20:50.000Z</published>
    <updated>2021-07-19T07:39:35.250Z</updated>
    
    <content type="html"><![CDATA[<p>  一般情况下，我们在启动类上面添加**@EnableFeignClients**注解就是表明当前应用服务（我们称之为<code>服务A</code>）中有的地方想要引用其它应用服务（我们称之为<code>服务B</code>）中的接口。<br>  如果<code>服务B可以单独启动起来并且注册到注册中心</code>，则我们仅仅在服务A的启动类中添加<code>@EnableFeignClients</code>注解即可；如果<code>服务B没有单独启动起来</code>，而是以Jar包的形式被引入到服务A中，则服务A在启动的时候是不会主动去加载服务B中标注了@FeignClient注解的interface而去自动生成bean对象，这样我们在服务A中的Controller类中以如下这种方式去引入<code>使用服务B中的标注了@FeignClient注解的接口</code>是会报错的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.bc.product.client.ProductClient;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductClient productClient;</span><br><span class="line"> </span><br><span class="line">    ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个时候就需要使用<code>basePackages</code>属性字段去指明应用程序A在启动的时候需要扫描服务B中的标注了@FeignClient注解的接口的包路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &#123;&quot;com.bc.product.client&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  一般情况下，我们在启动类上面添加**@EnableFeignClients**注解就是表明当前应用服务（我们称之为&lt;code&gt;服务A&lt;/code&gt;）中有的地方想要引用其它应用服务（我们称之为&lt;code&gt;服务B&lt;/code&gt;）中的接口。&lt;br&gt;  如果&lt;code&gt;服务B可</summary>
      
    
    
    
    
    <category term="spring-cloud" scheme="http://example.com/tags/spring-cloud/"/>
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>flutter 单元测试mockito的基本运用</title>
    <link href="http://example.com/2020/06/18/flutter-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95mockito%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%94%A8/"/>
    <id>http://example.com/2020/06/18/flutter-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95mockito%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%94%A8/</id>
    <published>2020-06-18T09:44:20.000Z</published>
    <updated>2020-06-18T10:01:01.199Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>web的单元测试好写，flutter的单元测试也好写，web的ui点击事件单元测试可以用jest全包，flutter的widget点击事件怎么模拟？</p></blockquote><span id="more"></span><h3 id="web和flutter单元测试的不同"><a href="#web和flutter单元测试的不同" class="headerlink" title="web和flutter单元测试的不同"></a>web和flutter单元测试的不同</h3><ul><li><p>如今react/vue的单元测试大家基本都用jest/enzyme了，确实好用，当我们mock的时候，jest会自动把待测试文件匹配的路径一同模拟。</p><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> api <span class="keyword">from</span> <span class="string">&#x27;@/services/api&#x27;</span>;</span><br><span class="line">jest.mock(<span class="string">&quot;@/services/api&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">auth</span>: &#123;</span><br><span class="line">            <span class="attr">token</span>: jest.fn(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(&#123; <span class="attr">data</span>: &#123; <span class="attr">info</span>: &#123;&#125; &#125;, <span class="attr">status</span>: <span class="string">&#x27;success&#x27;</span> &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>那我们不用去担心待测试文件方法调用，如果test文件调用api.auth.token()，肯定会返回**{ data: { info: {} }, status: ‘success’ }**</p></li><li><p>flutter的思想并不是这样的，mock不匹配路径，严格点说，和路径无关。flutter单元测试的中心思想很简单，和单元测试的思想是一致的，模拟依赖，各司其职。</p><p>首先flutter没有模拟路径的方法，那如何去解决api请求的问题呢，毕竟最大的难点就是这里。</p><p>对比两个代码段：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FLToastProvider(</span><br><span class="line">      defaults: _toastDefaults,</span><br><span class="line">      child: Builder(builder: (BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> MultiProvider(</span><br><span class="line">            providers: [</span><br><span class="line">              ChangeNotifierProvider&lt;DatetimeProvider&gt;(</span><br><span class="line">                  create: (_) =&gt; DatetimeProvider()),</span><br><span class="line">              ChangeNotifierProvider&lt;HealthProvider&gt;(</span><br><span class="line">                  create: (_) =&gt; HealthProvider(),</span><br><span class="line">            ],</span><br><span class="line">            child: widget.child</span><br><span class="line">        );</span><br><span class="line">      &#125;),</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FLToastProvider(</span><br><span class="line">      defaults: _toastDefaults,</span><br><span class="line">      child: Builder(builder: (BuildContext context) &#123;</span><br><span class="line">        return MultiProvider(</span><br><span class="line">            providers: [</span><br><span class="line">              ChangeNotifierProvider&lt;DatetimeProvider&gt;(</span><br><span class="line">                  create: (_) =&gt; DatetimeProvider()),</span><br><span class="line">              ChangeNotifierProvider&lt;HealthProvider&gt;(</span><br><span class="line">                  create: (_) =&gt; HealthProvider(api: healthApi)),</span><br><span class="line">            ],</span><br><span class="line">            child: widget.child</span><br><span class="line">        );</span><br><span class="line">      &#125;),</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>暂时把这个代码片段叫做makeTestableWidget，如上所示，原来我们的api依赖直接卸载provider里面，现在我们把它抽了出来，作为依赖传进去。这就是单元测试思想的体现。现在我们可以把我们模拟的依赖作为参数传进去，就可以去控制api请求的结果了。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MockHealthAPI</span> <span class="keyword">extends</span> <span class="title">Mock</span> <span class="keyword">implements</span> <span class="title">HealthApi</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> healthApi = MockHealthAPI();</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dosth...</span><br><span class="line">when(healthApi.getBloodPressureByGraph(&#123;<span class="string">&quot;category&quot;</span>: <span class="string">&quot;TIMES&quot;</span>, <span class="string">&quot;times&quot;</span>: <span class="number">7</span>,&#125;))</span><br><span class="line">      .thenReturn(GraphBpModel.fromJson(json.decode(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &#123;&quot;graphBp&quot;:&#123;&quot;time&quot;:[&#123;&quot;year&quot;:1592202572319,&quot;time&quot;:1592202572319&#125;,&#123;&quot;year&quot;:0,&quot;time&quot;:1591861014653&#125;,&#123;&quot;year&quot;:0,&quot;time&quot;:1591177545312&#125;],&quot;high&quot;:[110,110,121],&quot;low&quot;:[80,80,98],&quot;status&quot;:[&quot;NORMAL&quot;,&quot;NORMAL&quot;,&quot;NORMAL&quot;]&#125;,&quot;graphHeartRate&quot;:&#123;&quot;time&quot;:[&#123;&quot;year&quot;:1592202572319,&quot;time&quot;:1592202572319&#125;,&#123;&quot;year&quot;:0,&quot;time&quot;:1591861014653&#125;,&#123;&quot;year&quot;:0,&quot;time&quot;:1591177545312&#125;],&quot;heartRate&quot;:[60,60,72],&quot;status&quot;:[&quot;NORMAL&quot;,&quot;NORMAL&quot;,&quot;NORMAL&quot;]&#125;,&quot;bpLatest&quot;:&#123;&quot;high&quot;:96,&quot;low&quot;:68,&quot;bpStatus&quot;:&quot;NORMAL&quot;,&quot;heartRate&quot;:41,&quot;heartRateStatus&quot;:&quot;LOW&quot;,&quot;measuredAt&quot;:1591177056191590,&quot;year&quot;:null,&quot;referenceBpMax&quot;:140,&quot;referenceBpMin&quot;:90,&quot;referenceHeartRateMax&quot;:100,&quot;referenceHeartRateMin&quot;:47&#125;&#125;</span></span><br><span class="line"><span class="string">      &quot;&quot;&quot;</span>)));</span><br><span class="line">dosth...</span><br><span class="line">  <span class="keyword">await</span> tester.tap(BtnFinder);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    <span class="keyword">await</span> tester.pump();</span><br><span class="line"><span class="comment">//  检查 是否调用过</span></span><br><span class="line">    verify(healthApi.getBloodPressureByGraph(&#123;<span class="string">&quot;category&quot;</span>: <span class="string">&quot;TIMES&quot;</span>, <span class="string">&quot;times&quot;</span>: <span class="number">7</span>&#125;)).called(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>测试通过。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;web的单元测试好写，flutter的单元测试也好写，web的ui点击事件单元测试可以用jest全包，flutter的widget点击事件怎么模拟？&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="flutter" scheme="http://example.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>react hooks 组件的测试方法</title>
    <link href="http://example.com/2020/06/15/react-hooks-%E7%BB%84%E4%BB%B6%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2020/06/15/react-hooks-%E7%BB%84%E4%BB%B6%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/</id>
    <published>2020-06-15T09:03:34.000Z</published>
    <updated>2020-06-15T09:16:14.241Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>自从react-hooks出来以后，重构后的代码基本都适用hook了，和同事聊了几句，都说条理清楚了，写起来思路清楚一些，nice！但是我的instance上没有组件方法了，测试怎么办呢？</p></blockquote><span id="more"></span><p>很简单，简单来说有如下两种情况：</p><h3 id="事件有ui变化"><a href="#事件有ui变化" class="headerlink" title="事件有ui变化"></a>事件有ui变化</h3><p>那就用find方法去找事件前的ui，写一条断言；触发事件之后，找到现在的ui，再写一条断言去匹配即可。</p><h3 id="事件无ui变化"><a href="#事件无ui变化" class="headerlink" title="事件无ui变化"></a>事件无ui变化</h3><p>这种情况下多半是发出了api请求，那我们就mock api即可。</p><p>假如组件调用了“api.auth.token()”方法，那mock就如下写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> api <span class="keyword">from</span> <span class="string">&#x27;@/services/api&#x27;</span>;</span><br><span class="line"></span><br><span class="line">jest.mock(<span class="string">&quot;@/services/api&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">auth</span>: &#123;</span><br><span class="line">            <span class="attr">token</span>: jest.fn(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(&#123; <span class="attr">data</span>: &#123; <span class="attr">info</span>: &#123;&#125; &#125;, <span class="attr">status</span>: <span class="string">&#x27;success&#x27;</span> &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;自从react-hooks出来以后，重构后的代码基本都适用hook了，和同事聊了几句，都说条理清楚了，写起来思路清楚一些，nice！但是我的instance上没有组件方法了，测试怎么办呢？&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="hooks" scheme="http://example.com/tags/hooks/"/>
    
    <category term="测试方法" scheme="http://example.com/tags/%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>flutter provider中函数的形参问题</title>
    <link href="http://example.com/2020/06/02/flutter-provider%E4%B8%AD%E5%87%BD%E6%95%B0%E7%9A%84%E5%BD%A2%E5%8F%82%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/06/02/flutter-provider%E4%B8%AD%E5%87%BD%E6%95%B0%E7%9A%84%E5%BD%A2%E5%8F%82%E9%97%AE%E9%A2%98/</id>
    <published>2020-06-02T10:26:07.000Z</published>
    <updated>2020-06-02T10:27:30.574Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatetimeProvider</span> <span class="title">with</span> <span class="title">ChangeNotifier</span> </span>&#123;</span><br><span class="line">  <span class="built_in">DateTime</span> datetime  = <span class="built_in">DateTime</span>.now();</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">void</span> setDatetime(<span class="built_in">DateTime</span> datetime) &#123;</span><br><span class="line">    datetime = datetime;</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调试过程中，调用setDatetime，无论传入任何的datetime，原datetime都不会改变。</p><p>原因：函数的形参和定义的属性同名，函数执行时，没有用到我们传入的参数，一直自身赋值自身…</p><p>修复：改变参数名称，将setDatetime(DateTime datetime)改为setDatetime(DateTime newDatetime)即可…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
    <category term="flutter" scheme="http://example.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>canvas 字体颜色设置顺序</title>
    <link href="http://example.com/2020/05/19/canvas-%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E8%AE%BE%E7%BD%AE%E9%A1%BA%E5%BA%8F/"/>
    <id>http://example.com/2020/05/19/canvas-%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E8%AE%BE%E7%BD%AE%E9%A1%BA%E5%BA%8F/</id>
    <published>2020-05-19T07:34:19.000Z</published>
    <updated>2020-05-19T07:49:40.378Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上星期在小程序中使用echarts画图，真机体验太卡，四五次情况下就会卡住一次渲染不出来。切换到uni-app推荐的ucharts后，稍微修改下源码，就可以添加自己需要的功能和样式。其中字体的问题，比较有意思，记录一下。</p></blockquote><span id="more"></span><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>我们折线图上的点和数值需要自定义颜色，比如y轴数值90，这个在折线图上需要显示绿色的圆点和绿色的90文本。将颜色传过去后，点颜色是对的，但是数值的颜色不对，总是相邻的上一个的数值的颜色。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>经过重重查找筛选后，将问题集中大到“drawPointText”方法中，原始的canvas的文字绘制步骤是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.setFontSize(fontsize);</span><br><span class="line">context.fillText(text);</span><br><span class="line">context.setFillStyle(color);</span><br><span class="line">context.stroke();</span><br><span class="line">context.closePath();</span><br></pre></td></tr></table></figure><p>在其他地方无明显错误的情况下，将绘制的顺序修改如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.setFontSize(fontsize);</span><br><span class="line">context.setFillStyle(color);</span><br><span class="line">context.fillText(text);</span><br><span class="line">context.stroke();</span><br><span class="line">context.closePath();</span><br></pre></td></tr></table></figure><p>将<strong>fillText</strong>移到最后，文本的绘制就正常了。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>和html/css分工合作不同，canvas对绘制的顺序还是有一定要求的。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;上星期在小程序中使用echarts画图，真机体验太卡，四五次情况下就会卡住一次渲染不出来。切换到uni-app推荐的ucharts后，稍微修改下源码，就可以添加自己需要的功能和样式。其中字体的问题，比较有意思，记录一下。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="canvas" scheme="http://example.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>uni-app vendor.js过大的问题</title>
    <link href="http://example.com/2020/05/13/uni-app-vendor-js%E8%BF%87%E5%A4%A7%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/05/13/uni-app-vendor-js%E8%BF%87%E5%A4%A7%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-05-13T02:50:55.000Z</published>
    <updated>2020-05-13T03:37:41.269Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>年后和小伙伴们开始开发小程序，随着小程序功能逐渐丰富，代码越来越大，我们也开始使用分包来减少主包的文件体积，但是因为我们是使用uni-app来开发的，vendor.js 主文件承担了主要的代码逻辑，所以需要找到方法来优化一下。</p></blockquote><span id="more"></span><h3 id="启用分包"><a href="#启用分包" class="headerlink" title="启用分包"></a>启用分包</h3><ol><li><p>在src根目录中新建pagesA文件夹</p></li><li><p>在pages.json加入下面代码</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;subPackages&quot;</span> [</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attr">&quot;root&quot;</span>: <span class="string">&quot;pageA&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;pages&quot;</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attr">&quot;path&quot;</span>: &#x27;页面相对pagesA地址： page-demo/page-demo&#x27;,</span><br><span class="line">  <span class="attr">&quot;style&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;navigationBarTitleText&quot;</span>: <span class="string">&quot;title&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">  ],</span><br><span class="line"><span class="string">&quot;preloadRule&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;pages/some-page/some-page&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;network&quot;</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;packages&quot;</span>: [<span class="string">&quot;pagesA&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分包的配置和主pages配置基本一致，只是上面包裹了一个字段，下面的preloadRule告诉小程序，我们打开some-page页面的时候，需要预加载“pagesA”分包，优化用户体验。</p><h3 id="优化分包"><a href="#优化分包" class="headerlink" title="优化分包"></a>优化分包</h3><p>配置uni-app的manifest.json的“mp-weixin”字段</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;optimization&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;subPackages&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就开启了分包优化。</p><p>大致意思是如果一个文件或组件只在分包页面中使用，那文件就打包在分包中。如果在多个分包或主包中使用，那代码就会打包在主包中。</p><h3 id="启动命令优化"><a href="#启动命令优化" class="headerlink" title="启动命令优化"></a>启动命令优化</h3><p>官方指引：</p><ul><li><code>cli</code>创建的项目可以在<code>pacakge.json</code>中添加参数<code>--minimize</code>，示例：<code>&quot;dev:mp-weixin&quot;: &quot;cross-env NODE_ENV=development UNI_PLATFORM=mp-weixin vue-cli-service uni-build --watch --minimize&quot;</code></li></ul><p>这样的话，就在开发环境开启了代码压缩，立竿见影，代码压缩了50%左右。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;年后和小伙伴们开始开发小程序，随着小程序功能逐渐丰富，代码越来越大，我们也开始使用分包来减少主包的文件体积，但是因为我们是使用uni-app来开发的，vendor.js 主文件承担了主要的代码逻辑，所以需要找到方法来优化一下。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="uni-app" scheme="http://example.com/tags/uni-app/"/>
    
  </entry>
  
  <entry>
    <title>osx 安装 mariadb</title>
    <link href="http://example.com/2020/05/01/osx-%E5%AE%89%E8%A3%85-mariadb/"/>
    <id>http://example.com/2020/05/01/osx-%E5%AE%89%E8%A3%85-mariadb/</id>
    <published>2020-05-01T09:04:52.000Z</published>
    <updated>2021-07-19T07:35:37.664Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mariadb</span><br></pre></td></tr></table></figure><h3 id="启动-停止"><a href="#启动-停止" class="headerlink" title="启动/停止"></a>启动/停止</h3><p>启动/停止 mariadb 有两种方式，按需选择其中一种就可以：</p><ol><li>方式一： 通过brew启动/停止，<br>这种方法可以跟随系统启动（改plist那些操作麻烦并且会造成不稳定因素）<br>启动：brew services start mariadb<br>停止：brew services stop mariadb</li><li>方式二： 通过mysql.server，这个不能够跟随系统启动，每次重启MAC需要手动运行<br>启动：mysql.server start<br>停止：mysql.server stop</li></ol><span id="more"></span><h3 id="初始化mariadb-mysql"><a href="#初始化mariadb-mysql" class="headerlink" title="初始化mariadb(mysql)"></a>初始化mariadb(mysql)</h3><ol><li>初始化数据库，将数据库信息安装上去</li></ol><p>  sudo mysql_install_db<br>  可能有的人会提示已经安装，不管它，跑一次这个。</p><ol start="2"><li>初始化root账号及数据库各种设定<br>这一步很重要，下面会列出所有需要设置的选项，运行：</li></ol><p>  sudo mysql_secure_installation</p><p><strong>运行之后会进行初始化引导，每一步都有详细的说明。</strong><br><strong>下面列出每个选项的翻译，根据自己需要配置：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Enter current password <span class="keyword">for</span> root (enter <span class="keyword">for</span> none): &lt;– 初次运行直接回车</span><br><span class="line">…</span><br><span class="line">Set root password? [Y/n] &lt;– 是否设置root用户密码，建议设置，输入Y按回车</span><br><span class="line">…</span><br><span class="line">New password: &lt;– 设置root用户的密码</span><br><span class="line">Re-enter new password: &lt;– 再输入一次你设置的root的密码</span><br><span class="line">…</span><br><span class="line">Remove anonymous users? [Y/n] &lt;– 是否删除匿名用户，建议删除，Y删除，n不删除</span><br><span class="line">…</span><br><span class="line">Disallow root login remotely? [Y/n] &lt;– 是否禁止root远程登录，按需配置，Y禁止远程登录，n开启远程登录</span><br><span class="line">…</span><br><span class="line">Remove <span class="built_in">test</span> database and access to it? [Y/n] &lt;– 是否删除<span class="built_in">test</span>数据库，Y删除、n留着</span><br><span class="line">…</span><br><span class="line">Reload privilege tables now? [Y/n]&lt;– 是否重新加载权限表，建议重新加载，Y重新加载，n不重新加载</span><br><span class="line">…</span><br><span class="line">All <span class="keyword">done</span>! If you’ve completed all of the above steps, your MariaDB</span><br><span class="line">installation should now be secure.</span><br><span class="line">Thanks <span class="keyword">for</span> using MariaDB!</span><br></pre></td></tr></table></figure><p>通过这个就可以配置好mariadb。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install mariadb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;启动-停止&quot;&gt;&lt;a href=&quot;#启动-停止&quot; class=&quot;headerlink&quot; title=&quot;启动/停止&quot;&gt;&lt;/a&gt;启动/停止&lt;/h3&gt;&lt;p&gt;启动/停止 mariadb 有两种方式，按需选择其中一种就可以：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方式一： 通过brew启动/停止，&lt;br&gt;这种方法可以跟随系统启动（改plist那些操作麻烦并且会造成不稳定因素）&lt;br&gt;启动：brew services start mariadb&lt;br&gt;停止：brew services stop mariadb&lt;/li&gt;
&lt;li&gt;方式二： 通过mysql.server，这个不能够跟随系统启动，每次重启MAC需要手动运行&lt;br&gt;启动：mysql.server start&lt;br&gt;停止：mysql.server stop&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="mariadb" scheme="http://example.com/tags/mariadb/"/>
    
  </entry>
  
  <entry>
    <title>关于flutter图表控件fl_chart折线图不显示数据的问题</title>
    <link href="http://example.com/2020/04/29/%E5%85%B3%E4%BA%8Eflutter%E5%9B%BE%E8%A1%A8%E6%8E%A7%E4%BB%B6%E6%8A%98%E7%BA%BF%E5%9B%BE%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/04/29/%E5%85%B3%E4%BA%8Eflutter%E5%9B%BE%E8%A1%A8%E6%8E%A7%E4%BB%B6%E6%8A%98%E7%BA%BF%E5%9B%BE%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-04-29T07:35:09.000Z</published>
    <updated>2020-04-29T08:22:32.691Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目前正在带领app团队使用flutter重构公司的app，我负责其中一部分，其中有需要使用图表的组件，经过调研后决定使用fl_chart，功能强大且开发人员也比较活跃。但是发现折线图不能显示当前点的数据…没问题，clone下来自己修改下。</p></blockquote><h3 id="line-chart的示例"><a href="#line-chart的示例" class="headerlink" title="line_chart的示例"></a>line_chart的示例</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">LineChartBarData _createLineChatBarData(<span class="built_in">List</span>&lt;FlSpot&gt; spots, <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; xAxisIndex) &#123;</span><br><span class="line">  <span class="keyword">return</span> LineChartBarData(</span><br><span class="line">    showingIndicators: xAxisIndex,</span><br><span class="line">    barWidth: <span class="number">2</span>, <span class="comment">// 折线图折线宽度</span></span><br><span class="line">    spots: spots,</span><br><span class="line">    colors: [lineChartColor], <span class="comment">//多个颜色会有渐变效果</span></span><br><span class="line">    isCurved: <span class="keyword">true</span>, <span class="comment">//平滑曲线，一般配合curveSmoothness使用</span></span><br><span class="line">    curveSmoothness: <span class="number">0</span>,</span><br><span class="line">    isStepLineChart: <span class="keyword">false</span>,</span><br><span class="line">    dotData: FlDotData(</span><br><span class="line">        <span class="keyword">show</span>: <span class="keyword">true</span>,</span><br><span class="line">        dotSize: <span class="number">3</span>,</span><br><span class="line">        strokeWidth: <span class="number">0</span>,</span><br><span class="line">        showText: <span class="keyword">true</span>,  <span class="comment">// 添加自己的属性</span></span><br><span class="line">        getTextStyle: (FlSpot spot) &#123;  <span class="comment">// 添加自己的方法</span></span><br><span class="line">          <span class="keyword">return</span> TextStyle(color: Colors.green);</span><br><span class="line">        &#125;,</span><br><span class="line">        getStrokeColor: (FlSpot spot, <span class="built_in">double</span> xPercentage, LineChartBarData bar) &#123;</span><br><span class="line">          <span class="keyword">return</span> Colors.red;</span><br><span class="line">        &#125;,</span><br><span class="line">        getDotColor: (FlSpot _, <span class="built_in">double</span> xPercentage, LineChartBarData bar) &#123;</span><br><span class="line">          <span class="keyword">return</span> Colors.red;</span><br><span class="line">        &#125;</span><br><span class="line">      ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LineChart _chartChild() &#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; spotsNum = [];</span><br><span class="line">  widget.spotsArray.forEach((item) &#123;</span><br><span class="line">    item.forEach((spot) &#123;</span><br><span class="line">      spotsNum.add(spot.y.toInt());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  spotsNum.addAll(widget.extraLines);</span><br><span class="line">  <span class="built_in">int</span> yAxisMax = ArrayUtil.getArrMaxNum(spotsNum);</span><br><span class="line">  <span class="built_in">int</span> yAxisMin = ArrayUtil.getArrMinNum(spotsNum);</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; xAxisIndex = widget.xAxis.asMap().keys.toList();</span><br><span class="line">  <span class="built_in">List</span>&lt;LineChartBarData&gt; lineBarsData = widget.spotsArray.asMap().keys.map((index) &#123;</span><br><span class="line">    <span class="keyword">return</span> _createLineChatBarData(widget.spotsArray[index], xAxisIndex);</span><br><span class="line">  &#125;).toList();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> LineChart(LineChartData(</span><br><span class="line">      maxY: yAxisMax.toDouble(),  <span class="comment">// y轴最大值</span></span><br><span class="line">      minY: yAxisMin.toDouble(),  <span class="comment">// y轴最小值</span></span><br><span class="line">      titlesData: FlTitlesData(</span><br><span class="line">        <span class="comment">//标题</span></span><br><span class="line">        leftTitles: SideTitles(   <span class="comment">// Y轴</span></span><br><span class="line">          <span class="comment">//左侧标题</span></span><br><span class="line">            margin: <span class="number">15.</span>w,</span><br><span class="line">            showTitles: <span class="keyword">true</span>, <span class="comment">//展示标题</span></span><br><span class="line">            reservedSize: <span class="number">15</span>, <span class="comment">//标题宽度（不足会换行）</span></span><br><span class="line">            textStyle: chartTitleStyle, <span class="comment">//标题样式</span></span><br><span class="line"><span class="comment">//          interval: 7,</span></span><br><span class="line">            getTitles: (val) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        ),</span><br><span class="line">        bottomTitles: SideTitles(  <span class="comment">// X轴</span></span><br><span class="line">          <span class="comment">//底部标题</span></span><br><span class="line">          margin: <span class="number">20.</span>h,</span><br><span class="line">          showTitles: <span class="keyword">true</span>, <span class="comment">//展示标题</span></span><br><span class="line">          textStyle: chartTitleStyle,</span><br><span class="line">          getTitles: (val) &#123;</span><br><span class="line">            <span class="built_in">int</span> index = xAxisIndex.length - <span class="number">1</span> - <span class="built_in">int</span>.parse((val - <span class="number">1</span>).toStringAsFixed(<span class="number">0</span>));</span><br><span class="line">            <span class="keyword">var</span> dateString = widget.xAxis[index];</span><br><span class="line">            <span class="keyword">return</span> dateString;</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      lineBarsData: lineBarsData,</span><br><span class="line">      borderData: FlBorderData(   <span class="comment">// 图表边框</span></span><br><span class="line">        <span class="keyword">show</span>: <span class="keyword">false</span>,</span><br><span class="line">      ),</span><br><span class="line">      extraLinesData: ExtraLinesData(  <span class="comment">// 图表上额外的线（标准值标注）</span></span><br><span class="line">        extraLinesOnTop: <span class="keyword">true</span>,</span><br><span class="line">        horizontalLines: widget.extraLines.map((line) &#123;</span><br><span class="line">          <span class="keyword">return</span> _createExternalHLine(line.toDouble());</span><br><span class="line">        &#125;).toList(),</span><br><span class="line">        verticalLines: [],</span><br><span class="line">      ),</span><br><span class="line">      gridData: FlGridData(  <span class="comment">// 图表的珊格控制</span></span><br><span class="line">        <span class="keyword">show</span>: <span class="keyword">false</span>,</span><br><span class="line">        drawHorizontalLine: <span class="keyword">false</span>,</span><br><span class="line">        drawVerticalLine: <span class="keyword">false</span>,</span><br><span class="line">        verticalInterval: <span class="number">3</span></span><br><span class="line">      ),</span><br><span class="line"><span class="comment">//      showingTooltipIndicators: xAxisIndex.map((index) &#123;  // 显示tooltip的点</span></span><br><span class="line"><span class="comment">//        return ShowingTooltipIndicators(index, lineBarsData.asMap().keys.map((idx) &#123;</span></span><br><span class="line"><span class="comment">//          return LineBarSpot(</span></span><br><span class="line"><span class="comment">//              lineBarsData[idx], idx, lineBarsData[idx].spots[index]</span></span><br><span class="line"><span class="comment">//            );</span></span><br><span class="line"><span class="comment">//        &#125;).toList());</span></span><br><span class="line"><span class="comment">//      &#125;).toList(),</span></span><br><span class="line"><span class="comment">//      lineTouchData: LineTouchData(  图表触控控制系统（和showingTooltipIndicators搭配使用）</span></span><br><span class="line"><span class="comment">//        enabled: false,   //  设置为true则触控显示tooltip，false一直显示</span></span><br><span class="line"><span class="comment">//// <span class="markdown"><span class="code">       fullHeightTouchLine: true,</span></span></span></span><br><span class="line"><span class="comment">//        getTouchedSpotIndicator: (LineChartBarData barData, List&lt;int&gt; spotIndexes) &#123;</span></span><br><span class="line"><span class="comment">//          return spotIndexes.map((index) &#123;</span></span><br><span class="line"><span class="comment">//            return TouchedSpotIndicatorData(</span></span><br><span class="line"><span class="comment">//              FlLine(</span></span><br><span class="line"><span class="comment">//                color: Colors.transparent,</span></span><br><span class="line"><span class="comment">//              ),</span></span><br><span class="line"><span class="comment">//              FlDotData(</span></span><br><span class="line"><span class="comment">//                show: true,</span></span><br><span class="line"><span class="comment">//                dotSize: 0,</span></span><br><span class="line"><span class="comment">//                strokeWidth: 3,</span></span><br><span class="line"><span class="comment">//                getStrokeColor: (spot, percent, barData) =&gt; _getCurColorByIndex(widget.status, index),</span></span><br><span class="line"><span class="comment">//              ),</span></span><br><span class="line"><span class="comment">//            );</span></span><br><span class="line"><span class="comment">//          &#125;).toList();</span></span><br><span class="line"><span class="comment">//        &#125;,</span></span><br><span class="line"><span class="comment">//        touchTooltipData: LineTouchTooltipData(  //  tooltip样式控制</span></span><br><span class="line"><span class="comment">//            tooltipBgColor: Colors.transparent,</span></span><br><span class="line"><span class="comment">//            tooltipRoundedRadius: 0,</span></span><br><span class="line"><span class="comment">//            tooltipBottomMargin: 0,</span></span><br><span class="line"><span class="comment">//            getTooltipItems: (List&lt;LineBarSpot&gt; touchedSpots) &#123;</span></span><br><span class="line"><span class="comment">//// <span class="markdown"><span class="code">             if (touchedSpots == null) &#123;</span></span></span></span><br><span class="line"><span class="comment">//// <span class="markdown"><span class="code">               return null;</span></span></span></span><br><span class="line"><span class="comment">//// <span class="markdown"><span class="code">             &#125;</span></span></span></span><br><span class="line"><span class="comment">//              return touchedSpots.map((LineBarSpot touchedSpot) &#123;</span></span><br><span class="line"><span class="comment">//// <span class="markdown"><span class="code">               if (touchedSpot == null) &#123;</span></span></span></span><br><span class="line"><span class="comment">//// <span class="markdown"><span class="code">                 return null;</span></span></span></span><br><span class="line"><span class="comment">//// <span class="markdown"><span class="code">               &#125;</span></span></span></span><br><span class="line"><span class="comment">//                final TextStyle textStyle = TextStyle(</span></span><br><span class="line"><span class="comment">//                  color: Colors.red,</span></span><br><span class="line"><span class="comment">//                  fontWeight: FontWeight.bold,</span></span><br><span class="line"><span class="comment">//                  fontSize: 10,</span></span><br><span class="line"><span class="comment">//                );</span></span><br><span class="line"><span class="comment">//                return LineTooltipItem(touchedSpot.y.toString(), textStyle);</span></span><br><span class="line"><span class="comment">//              &#125;).toList();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        ),</span></span><br><span class="line"><span class="comment">//      ),</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>单折线</strong>使用showingTooltipIndicators和lineTouchData配合即可实现显示点的数值，效果大致如下:</p><p><img src="https://pic.downk.cc/item/5ea93820c2a9a83be51bc749.png" alt="single"></p><p>但是如果为<strong>多折线</strong>，所有数据会显示在最上，效果如下：</p><p><img src="https://pic.downk.cc/item/5ea93820c2a9a83be51bc74b.png" alt="multi"></p><p>显然和我们期待的不一致，所以需要另辟蹊径…</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>查阅Fl_Chart的源码后发现，折线图文件分为“line_chart.dart”,”line_chart_data.dart”和“line_chart_painter.dart”三个文件，其中line_chart调用另两个文件，line_chart_data提供数据结构，也就是各种类文件，line_chart_painter负责具体绘制。</p><p>而我们需要做的就是在绘制图表上的点的同时，把当前点的y轴数值绘制上就可以了，经过一番查找，line_chart_data中 <strong>FlDotData</strong>负责定义点的数据，line_chart_painter中 <strong>_drawDots</strong>负责绘制，修改如下：</p><ol><li><p>首先将fl_chart图表库放入plugins文件夹中，使用本地库引用。</p></li><li><p>在FlDotData的类中加入三个新属性：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@required</span> <span class="built_in">bool</span> showText,   <span class="comment">// 控制是否显示数值</span></span><br><span class="line">GetTextStyleCallback getTextStyle, <span class="comment">// 数值样式</span></span><br><span class="line">Offset textOffset, <span class="comment">// 数值偏移 （没用，还没实现）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在line_chart_painter的_drawDots中的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt; barData.spots.length; i++) &#123;&#125;</span><br></pre></td></tr></table></figure><p>循环最后加入绘制当前点的代码即可：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改：在每个点上面显示数值  = =</span></span><br><span class="line">  <span class="keyword">void</span> _drawDots(Canvas canvas, Size viewSize, LineChartBarData barData) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!barData.dotData.<span class="keyword">show</span> || barData.spots == <span class="keyword">null</span> || barData.spots.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    viewSize = getChartUsableDrawSize(viewSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> barXDelta = _getBarLineXLength(barData, viewSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; barData.spots.length; i++) &#123;</span><br><span class="line">      <span class="keyword">final</span> FlSpot spot = barData.spots[i];</span><br><span class="line">      <span class="keyword">if</span> (barData.dotData.checkToShowDot(spot, barData)) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">double</span> x = getPixelX(spot.x, viewSize);</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">double</span> y = getPixelY(spot.y, viewSize);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">double</span> xPercentInLine = ((x - getLeftOffsetDrawSize()) / barXDelta) * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> dotColor = barData.dotData.getDotColor(spot, xPercentInLine, barData);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (barData.dotData.getStrokeColor != <span class="keyword">null</span> &amp;&amp; barData.dotData.strokeWidth != <span class="keyword">null</span>) &#123;</span><br><span class="line">          canvas.drawCircle(</span><br><span class="line">              Offset(x, y),</span><br><span class="line">              barData.dotData.dotSize + (barData.dotData.strokeWidth / <span class="number">2</span>),</span><br><span class="line">              _dotPaint</span><br><span class="line">                ..color = barData.dotData.getStrokeColor(spot, xPercentInLine, barData)</span><br><span class="line">                ..strokeWidth = barData.dotData.strokeWidth</span><br><span class="line">                ..style = PaintingStyle.stroke);</span><br><span class="line">        &#125;</span><br><span class="line">        canvas.drawCircle(</span><br><span class="line">            Offset(x, y),</span><br><span class="line">            barData.dotData.dotSize,</span><br><span class="line">            _dotPaint</span><br><span class="line">              ..color = dotColor</span><br><span class="line">              ..style = PaintingStyle.fill);</span><br><span class="line"><span class="comment">//        print(&quot;barData.dotData.show $&#123;barData.dotData.show&#125;&quot;);</span></span><br><span class="line"><span class="comment">//        print(&quot;barData.dotData.dotSize $&#123;barData.dotData.dotSize&#125;&quot;);</span></span><br><span class="line"><span class="comment">//        print(&quot;barData.dotData.showText $&#123;barData.dotData.showText&#125;&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (barData.dotData.showText) &#123;</span><br><span class="line">          TextStyle _defaultStyle = TextStyle(color: Colors.red, fontSize: <span class="number">12</span>, fontWeight: FontWeight.bold);</span><br><span class="line">          Offset _defaultOffset = Offset(x - <span class="number">8</span>, y - <span class="number">20</span>);</span><br><span class="line">          <span class="comment">// 绘制spot点y轴数值</span></span><br><span class="line">          <span class="keyword">final</span> TextSpan span = TextSpan(</span><br><span class="line">            style: barData.dotData.getTextStyle(spot),</span><br><span class="line">            text: <span class="string">&quot;<span class="subst">$&#123;spot.y.toInt()&#125;</span>&quot;</span>,</span><br><span class="line">          );</span><br><span class="line">          <span class="keyword">final</span> TextPainter tp = TextPainter(</span><br><span class="line">              text: span,</span><br><span class="line">              textAlign: TextAlign.center,</span><br><span class="line">              textDirection: TextDirection.ltr,</span><br><span class="line">              textScaleFactor: textScale);</span><br><span class="line">          tp.layout();</span><br><span class="line">          <span class="keyword">final</span> drawOffset = _defaultOffset;</span><br><span class="line">          tp.paint(canvas, drawOffset);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><p>最后效果如图：</p><p><img src="https://pic.downk.cc/item/5ea93820c2a9a83be51bc745.png" alt="final"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;目前正在带领app团队使用flutter重构公司的app，我负责其中一部分，其中有需要使用图表的组件，经过调研后决定使用fl_chart，功能强大且开发人员也比较活跃。但是发现折线图不能显示当前点的数据…没问题，clone下来自己修改下。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="flutter" scheme="http://example.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>使用travis仓库公钥替换自己主机公钥</title>
    <link href="http://example.com/2020/01/22/%E4%BD%BF%E7%94%A8travis%E4%BB%93%E5%BA%93%E5%85%AC%E9%92%A5%E6%9B%BF%E6%8D%A2%E8%87%AA%E5%B7%B1%E4%B8%BB%E6%9C%BA%E5%85%AC%E9%92%A5/"/>
    <id>http://example.com/2020/01/22/%E4%BD%BF%E7%94%A8travis%E4%BB%93%E5%BA%93%E5%85%AC%E9%92%A5%E6%9B%BF%E6%8D%A2%E8%87%AA%E5%B7%B1%E4%B8%BB%E6%9C%BA%E5%85%AC%E9%92%A5/</id>
    <published>2020-01-22T07:33:01.000Z</published>
    <updated>2020-01-22T08:31:50.055Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每次重装完电脑，自己本机的密钥就没了，在去配置blog的密钥登陆也是一大麻烦，当然也可以重装前备份，那么有没有别的办法，不用每次这么麻烦呢？</p></blockquote><p><a href="https://docs.travis-ci.com/user/encryption-keys#fetching-the-public-key-for-your-repository">看这里</a>，可以获得仓库的公钥，然后将其添加到 authorized_keys 即可。</p><h3 id="获取仓库公钥"><a href="#获取仓库公钥" class="headerlink" title="获取仓库公钥"></a>获取仓库公钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis pubkey -r wxrbwran/wxrbwran.github.io</span><br></pre></td></tr></table></figure><p>输出如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Public key <span class="keyword">for</span> wxrbwran/wxrbwran.github.io</span><br><span class="line"></span><br><span class="line">ssh-rsa ......</span><br></pre></td></tr></table></figure><h3 id="将公钥添加到-authorized-keys"><a href="#将公钥添加到-authorized-keys" class="headerlink" title="将公钥添加到 authorized_keys"></a>将公钥添加到 authorized_keys</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir .ssh</span><br><span class="line">chmod 700 .ssh</span><br><span class="line">touch .ssh/authorized_keys</span><br><span class="line">chmod 600 .ssh/authorized_keys</span><br><span class="line">vim .ssh/authorized_keys <span class="comment"># 添加上面的公钥</span></span><br></pre></td></tr></table></figure><p>使用该方案，无需方案一的添加 before_install 的步骤。</p><p>然后分别加入到github中和腾讯云主机中，这样travis就可以自主登录操作了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;每次重装完电脑，自己本机的密钥就没了，在去配置blog的密钥登陆也是一大麻烦，当然也可以重装前备份，那么有没有别的办法，不用每次这么麻烦呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.travis-ci.</summary>
      
    
    
    
    
    <category term="travis" scheme="http://example.com/tags/travis/"/>
    
  </entry>
  
  <entry>
    <title>nextjs项目的部署</title>
    <link href="http://example.com/2019/05/10/nextjs%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2019/05/10/nextjs%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%83%A8%E7%BD%B2/</id>
    <published>2019-05-10T02:11:05.000Z</published>
    <updated>2020-01-22T08:31:50.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常规部署"><a href="#常规部署" class="headerlink" title="常规部署"></a>常规部署</h2><h3 id="Export静态资源"><a href="#Export静态资源" class="headerlink" title="Export静态资源"></a>Export静态资源</h3><p>提到发布页面，就不能不提到Next提供的这个功能了，前面也减少过，但是很简单的介绍的，正好这个Demo全是静态页，没有任何数据获取操作～<br>Export的功能就是通过配置，将对应的pages下的路由页面导出成静态html文件。</p><span id="more"></span><h3 id="export-配置"><a href="#export-配置" class="headerlink" title="export 配置"></a>export 配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;NODE_ENV=development node server.ts -p 3006&quot;</span>,</span><br><span class="line">    <span class="string">&quot;prod&quot;</span>: <span class="string">&quot;NODE_ENV=production node server.ts -p 3006&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;NODE_ENV=production node server.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;next build&quot;</span>,</span><br><span class="line">    <span class="comment">// 新增export命令</span></span><br><span class="line">    <span class="string">&quot;export&quot;</span>: <span class="string">&quot;yarn build &amp;&amp; next export&quot;</span>,</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// next.config.js</span></span><br><span class="line"> <span class="attr">exportPathMap</span>: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">defaultPathMap</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="string">&#x27;/&#x27;</span>: &#123; <span class="attr">page</span>: <span class="string">&#x27;/&#x27;</span> &#125;,</span><br><span class="line">      <span class="string">&#x27;/user&#x27;</span>: &#123; <span class="attr">page</span>: <span class="string">&#x27;/user&#x27;</span> &#125;,</span><br><span class="line">      <span class="string">&#x27;/user/list&#x27;</span>: &#123; <span class="attr">page</span>: <span class="string">&#x27;/user/list&#x27;</span> &#125;,</span><br><span class="line">      <span class="string">&#x27;/user/detail&#x27;</span>: &#123; <span class="attr">page</span>: <span class="string">&#x27;/user/detail&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="serve启动"><a href="#serve启动" class="headerlink" title="serve启动"></a>serve启动</h3><p>我们通过export命令，会将项目生成一个静态资源文件夹out，如图所示：<br><img src="./next1.png"></p><blockquote><p>其实这个就跟我们正常的SPA应用例如create-react-app生成的build文件夹很像，里面有一个index.html。同理，我们可以使用serve来进行启动～</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>安装serve</span><br><span class="line">yarn add serve</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>增加启动命令</span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 增加</span></span><br><span class="line">    <span class="string">&quot;static&quot;</span>: <span class="string">&quot;yarn export &amp;&amp; serve out&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>运行命令</span><br><span class="line">yarn <span class="keyword">static</span></span><br></pre></td></tr></table></figure><p>期间任务失败，主要是antd的less问题，查阅各个网站，目前只能降级到nextjs7.0.2.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(function (exports, require, module, __filename, __dirname) &#123; @import &#x27;./themes/default&#x27;;</span><br><span class="line">                                                              ^</span><br><span class="line"></span><br><span class="line">SyntaxError: Invalid or unexpected token</span><br></pre></td></tr></table></figure><p>解决问题后，运行后控制台截图，以及访问localhost:5000/<br><img src="./next2.png"></p><h2 id="生产环境部署"><a href="#生产环境部署" class="headerlink" title="生产环境部署"></a>生产环境部署</h2><blockquote><p>官方的代码就是将NODE_ENV设置成production即可，就是生产环境～，这里说明一下正好有人问过，如果是windows环境，命令应该变成”prod”: “set NODE_ENV=production &amp;&amp; node server.js”<br>即： yarn build</p></blockquote><h2 id="PM2实现高级部署上线"><a href="#PM2实现高级部署上线" class="headerlink" title="PM2实现高级部署上线"></a>PM2实现高级部署上线</h2><ul><li>第一步：配置文件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">apps</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 指定解释器</span></span><br><span class="line">      <span class="attr">interpreter</span>: <span class="string">&#x27;./node_modules/.bin/ts-node&#x27;</span>,</span><br><span class="line">      <span class="comment">// 解释器参数 -P 表示项目路径，会自动使用项目的 tsconfig.json</span></span><br><span class="line">      <span class="attr">interpreter_args</span>: <span class="string">&#x27;-P ./ -r tsconfig-paths/register&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;next&#x27;</span>, <span class="comment">// 应用名称</span></span><br><span class="line">      <span class="attr">script</span>: <span class="string">&#x27;./server.ts&#x27;</span>, <span class="comment">// 启动文件地址</span></span><br><span class="line">      <span class="attr">cwd</span>: <span class="string">&#x27;./&#x27;</span>, <span class="comment">// 当前工作路径</span></span><br><span class="line">      <span class="attr">watch</span>: [</span><br><span class="line">        <span class="comment">// 监控变化的目录，一旦变化，自动重启</span></span><br><span class="line">        <span class="string">&#x27;.next&#x27;</span>,</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">ignore_watch</span>: [</span><br><span class="line">        <span class="comment">// 从监控目录中排除</span></span><br><span class="line">        <span class="string">&#x27;node_modules&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;logs&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;static&#x27;</span>,</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">instances</span>: <span class="number">2</span>, <span class="comment">// 负载均衡，启动2个实例</span></span><br><span class="line">      <span class="attr">node_args</span>: <span class="string">&#x27;--harmony&#x27;</span>, <span class="comment">// node的启动模式</span></span><br><span class="line">      <span class="attr">env</span>: &#123;</span><br><span class="line">        <span class="attr">NODE_ENV</span>: <span class="string">&#x27;production&#x27;</span>, <span class="comment">// 设置运行环境，此时process.env.NODE_ENV的值就是development</span></span><br><span class="line">        <span class="attr">port</span>: <span class="number">3006</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">env_production</span>: &#123;</span><br><span class="line">        <span class="attr">NODE_ENV</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">        <span class="attr">port</span>: <span class="number">5555</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">out_file</span>: <span class="string">&#x27;./logs/out.log&#x27;</span>, <span class="comment">// 普通日志路径</span></span><br><span class="line">      <span class="attr">error_file</span>: <span class="string">&#x27;./logs/err.log&#x27;</span>, <span class="comment">// 错误日志路径</span></span><br><span class="line">      <span class="attr">merge_logs</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">log_date_format</span>: <span class="string">&#x27;YYYY-MM-DD HH:mm Z&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>第二步：部署服务<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 运行命令</span><br><span class="line">$ pm2 start pm2.config.js --env production</span><br></pre></td></tr></table></figure><img src="./next3.png"><br>如上图所示，我这边开发环境是3006端口，生产环境是5555端口，使用pm2部署服务以后，访问项目都是正常的，包括API服务。并且pm2还为我们提供日志以及监控功能，详细如下图：</li></ul><p>系统所有的控制台输出日志：<br><img src="./next4.png"></p><h2 id="now-部署"><a href="#now-部署" class="headerlink" title="now 部署"></a>now 部署</h2><p>Next.js原本就是zeit仓库的一个项目，而对应配套的，zeit仓库还有一个now项目，专门进行部署的<br>now-cli很强大，我只用来部署Next.js项目了，其实它可以支持很多很多种部署，具体如下图<br><img src="next5.png"></p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>首先就是安装now工具了，官方提供下载地址，各种版本的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 安装now</span><br><span class="line">npm install -g now</span><br></pre></td></tr></table></figure><h3 id="部署踩坑"><a href="#部署踩坑" class="headerlink" title="部署踩坑"></a>部署踩坑</h3><p>安装完之后迫不及待的进行尝试，我其实就是按照文档一步一步来做的，文档地址<a href="https://zeit.co/docs/v2/deployments/official-builders/next-js-now-next/">now-next docs</a>。</p><h4 id="第一次尝试-add-now-json"><a href="#第一次尝试-add-now-json" class="headerlink" title="第一次尝试 - add now.json"></a>第一次尝试 - add now.json</h4><p>新建now.json配置文件，键入如下代码：<br>{<br>  “version”: 2,<br>  “builds”: [{ “src”: “next.config.js”, “use”: “@now/next” }]<br>}<br>复制代码然后运行部署命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">now</span><br></pre></td></tr></table></figure><p>now会让我们注册，邮件等照做就可以了。<br>因为我们降级了，所以并没有遇到serverless或publicRuntimeConfig等问题，但是出现了**Unable to import module ‘now__launcher’**的错误。<br>这个错误是由于在next.config.js中直接引用了withLess之类的插件导致的。在now环境下require插件需要在PHASE_PRODUCTION_SERVER阶段下，如果不加这个阶段的判断就会报错。<br>我们一般把引用放到文件头部，但这里会出错，向下面这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> withCSS = <span class="built_in">require</span>(<span class="string">&#x27;@zeit/next-css&#x27;</span>); <span class="comment">// 由于不在PHASE_PRODUCTION_SERVER阶段所以报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; PHASE_PRODUCTION_SERVER &#125; =</span><br><span class="line"></span><br><span class="line">  process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span></span><br><span class="line"></span><br><span class="line">    ? &#123;&#125;</span><br><span class="line"></span><br><span class="line">    : !process.env.NOW_REGION</span><br><span class="line"></span><br><span class="line">      ? <span class="built_in">require</span>(<span class="string">&#x27;next/constants&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      : <span class="built_in">require</span>(<span class="string">&#x27;next-server/constants&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">phase, &#123; defaultConfig &#125;</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (phase === PHASE_PRODUCTION_SERVER) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Config used to run in production.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> withCSS();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>正确的写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; PHASE_PRODUCTION_SERVER &#125; = process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span></span><br><span class="line">  ? &#123;&#125;</span><br><span class="line">  : !process.env.NOW_REGION</span><br><span class="line">    ? <span class="built_in">require</span>(<span class="string">&#x27;next/constants&#x27;</span>)</span><br><span class="line">    : <span class="built_in">require</span>(<span class="string">&#x27;next-server/constants&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fix: prevents error when .less files are required by node</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">require</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">  <span class="built_in">require</span>.extensions[<span class="string">&#x27;.less&#x27;</span>] = <span class="function">(<span class="params">file</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(&#x27;theme&#x27;, theme);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">phase, &#123; defaultConfig &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (phase === PHASE_PRODUCTION_SERVER) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> theme = <span class="built_in">require</span>(<span class="string">&#x27;./theme&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> withTypescript = <span class="built_in">require</span>(<span class="string">&#x27;@zeit/next-typescript&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> cssLoaderConfig = <span class="built_in">require</span>(<span class="string">&#x27;@zeit/next-css/css-loader-config&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> withTypescript(&#123;</span><br><span class="line">    <span class="attr">pageExtensions</span>: [<span class="string">&#x27;jsx&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;ts&#x27;</span>, <span class="string">&#x27;tsx&#x27;</span>],</span><br><span class="line">    <span class="attr">exportPathMap</span>: <span class="keyword">async</span> (defaultPathMap) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;/&#x27;</span>: &#123; <span class="attr">page</span>: <span class="string">&#x27;/&#x27;</span> &#125;,</span><br><span class="line">        <span class="string">&#x27;/user&#x27;</span>: &#123; <span class="attr">page</span>: <span class="string">&#x27;/user&#x27;</span> &#125;,</span><br><span class="line">        <span class="string">&#x27;/user/list&#x27;</span>: &#123; <span class="attr">page</span>: <span class="string">&#x27;/user/list&#x27;</span> &#125;,</span><br><span class="line">        <span class="string">&#x27;/user/detail&#x27;</span>: &#123; <span class="attr">page</span>: <span class="string">&#x27;/user/detail&#x27;</span> &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">webpack</span>(<span class="params">config, options</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!options.defaultLoaders) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">          <span class="string">&#x27;This plugin is not compatible with Next.js versions below 5.0.0 https://err.sh/next-plugins/upgrade&#x27;</span>,</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> &#123; dev, defaultLoaders, isServer &#125; = options;</span><br><span class="line">      <span class="comment">// const nextConfig = &#123;&#125;;</span></span><br><span class="line">      <span class="keyword">const</span> &#123;</span><br><span class="line">        cssModules,</span><br><span class="line">        cssLoaderOptions,</span><br><span class="line">        postcssLoaderOptions,</span><br><span class="line">        lessLoaderOptions = &#123;&#125;,</span><br><span class="line">      &#125; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// console.log(&#x27;options.defaultLoaders&#x27;, defaultLoaders);</span></span><br><span class="line"></span><br><span class="line">      config.resolve.extensions.push(<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.tsx&#x27;</span>);</span><br><span class="line">      config.resolve.alias = <span class="built_in">Object</span>.assign(&#123;&#125;, config.resolve.alias, &#123;</span><br><span class="line">        <span class="string">&#x27;@utils&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;utils&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;@assets&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;assets&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;@pages&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;pages&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;@components&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;components&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;@services&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;services&#x27;</span>),</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      defaultLoaders.less = cssLoaderConfig(config, &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;less&#x27;</span>],</span><br><span class="line">        cssModules,</span><br><span class="line">        cssLoaderOptions,</span><br><span class="line">        postcssLoaderOptions,</span><br><span class="line">        dev,</span><br><span class="line">        isServer,</span><br><span class="line">        <span class="attr">loaders</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: lessLoaderOptions,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      config.module.rules.push(&#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: options.defaultLoaders.less,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 我们禁用了antd的cssModules</span></span><br><span class="line">      config.module.rules.push(&#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        include: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: cssLoaderConfig(config, &#123;</span><br><span class="line">          <span class="attr">extensions</span>: [<span class="string">&#x27;less&#x27;</span>],</span><br><span class="line">          <span class="attr">cssModules</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">cssLoaderOptions</span>: &#123;&#125;,</span><br><span class="line">          dev,</span><br><span class="line">          isServer,</span><br><span class="line">          <span class="attr">loaders</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">loader</span>: <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">              <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">javascriptEnabled</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">modifyVars</span>: theme,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      config.module.rules.push(&#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: cssLoaderConfig(config, &#123;</span><br><span class="line">          <span class="attr">extensions</span>: [<span class="string">&#x27;scss&#x27;</span>],</span><br><span class="line">          <span class="attr">cssModules</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">cssLoaderOptions</span>: &#123;</span><br><span class="line">            <span class="attr">importLoaders</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">localIdentName</span>: <span class="string">&#x27;[local]_[hash:base64:6]&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          dev,</span><br><span class="line">          isServer,</span><br><span class="line">          <span class="attr">loaders</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">loader</span>: <span class="string">&#x27;sass-loader&#x27;</span>,</span><br><span class="line">              <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">data</span>: <span class="string">&#x27;@import &quot;_base.scss&quot;;&#x27;</span>,</span><br><span class="line">                <span class="attr">includePaths</span>: [path.resolve(<span class="string">&#x27;./styles&#x27;</span>)],</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (dev) &#123;</span><br><span class="line">        config.module.rules.push(&#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.(ts|tsx|js|jsx)$/</span>,</span><br><span class="line">          enforce: <span class="string">&#x27;pre&#x27;</span>,</span><br><span class="line">          <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            <span class="attr">configFile</span>: path.resolve(<span class="string">&#x27;.eslintrc&#x27;</span>),</span><br><span class="line">            <span class="attr">eslint</span>: &#123;</span><br><span class="line">              <span class="attr">configFile</span>: path.resolve(__dirname, <span class="string">&#x27;.eslintrc&#x27;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">fix</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        config.devtool = <span class="string">&#x27;cheap-module-eval-source-map&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> config;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这之后偶尔会出现 **Error! File size limit exceeded (0B)**的错误，重新启动即可。<br><img src="next6.png"><br><img src="next7.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;常规部署&quot;&gt;&lt;a href=&quot;#常规部署&quot; class=&quot;headerlink&quot; title=&quot;常规部署&quot;&gt;&lt;/a&gt;常规部署&lt;/h2&gt;&lt;h3 id=&quot;Export静态资源&quot;&gt;&lt;a href=&quot;#Export静态资源&quot; class=&quot;headerlink&quot; title=&quot;Export静态资源&quot;&gt;&lt;/a&gt;Export静态资源&lt;/h3&gt;&lt;p&gt;提到发布页面，就不能不提到Next提供的这个功能了，前面也减少过，但是很简单的介绍的，正好这个Demo全是静态页，没有任何数据获取操作～&lt;br&gt;Export的功能就是通过配置，将对应的pages下的路由页面导出成静态html文件。&lt;/p&gt;</summary>
    
    
    
    
    <category term="nextjs" scheme="http://example.com/tags/nextjs/"/>
    
  </entry>
  
  <entry>
    <title>pm2简易手册</title>
    <link href="http://example.com/2019/05/09/pm2%E7%AE%80%E6%98%93%E6%89%8B%E5%86%8C/"/>
    <id>http://example.com/2019/05/09/pm2%E7%AE%80%E6%98%93%E6%89%8B%E5%86%8C/</id>
    <published>2019-05-09T06:31:02.000Z</published>
    <updated>2020-01-22T08:31:50.035Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PM2-使用手册"><a href="#PM2-使用手册" class="headerlink" title="PM2 使用手册"></a>PM2 使用手册</h3><p>对于线上项目，如果直接通过 node app 来启动，如果报错了可能直接停止导致整个服务崩溃，一般监控 node 有几种方案。</p><ul><li>supervisor: 一般用作开发环境的使用。</li><li> forever: 管理多个站点，一般每个站点的访问量不大的情况，不需要监控。</li><li>PM2: 网站的访问量比较大，需要完整的监控页面。</li></ul><blockquote><p>开发是使用的是nodemon,部署是后端人员操作，一直没有深入使用过pm2，这次部署next项目，正好熟习一下。</p></blockquote><hr><span id="more"></span><h3 id="PM2-的主要特性"><a href="#PM2-的主要特性" class="headerlink" title="PM2 的主要特性"></a>PM2 的主要特性</h3><ol><li>内建负载均衡（使用 Node cluster 集群模块）<br>后台运行</li><li>0 秒停机重载，我理解大概意思是维护升级的时候不需要停机.</li><li>具有 Ubuntu 和 CentOS 的启动脚本</li><li>停止不稳定的进程（避免无限循环）</li><li>控制台检测</li><li>提供 HTTP API</li><li>远程控制和实时的接口 API ( Nodejs 模块,允许和 PM2 进程管理器交互 )</li></ol><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="基本启动命令"><a href="#基本启动命令" class="headerlink" title="基本启动命令"></a>基本启动命令</h4><blockquote><p> pm2 start</p></blockquote><p>// start命令启动对应的node server文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start ./build/server.js</span><br></pre></td></tr></table></figure><p>通过配置文件进行启动稍后详细讲解<br>启动之后，控制台会看到如下消息：<br><img src="./pm21.png"></p><blockquote><p>如上图所示，可以看到项目next成功启动,id 是 2,3，并且状态时 online.之所以有两个，是因为在配置文件开了负载均衡，下面会说。</p></blockquote><ul><li>查看详细状态信息</li></ul><blockquote><p>pm2 show (appname|id)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 show 2或pm2 show next</span><br></pre></td></tr></table></figure><p><img src="./pm22.png"></p><blockquote><p>如上图所示，可以查看到 next 进程的详细信息</p></blockquote><ul><li><p>查看所有启动的进程列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 list</span><br></pre></td></tr></table></figure><p><img src="./pm23.png"></p></li><li><p>监控每个 node 进程的 cpu 和内存使用情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 monit</span><br></pre></td></tr></table></figure><blockquote><p>可以使用 pm2 monit 功能监控所有 node 进程的运行情况，包括各种响应，错误信息。</p></blockquote></li><li><p>显示所有进程的日志信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 logs</span><br></pre></td></tr></table></figure></li><li><p>监控运行这些进程的机器的状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 web</span><br></pre></td></tr></table></figure><p><img src="./pm24.png"><br>在浏览器打开上图中的地址：0.0.0.0:9615, 可以看到本机的各种信息。<br><img src="./pm25.png"></p></li><li><p>停止 指定/所有 进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 stop (id|all)</span><br></pre></td></tr></table></figure><blockquote><p>// 停止id为0的进程<br>$ pm2 stop 0<br>// 停止所有进程<br>$ pm2 stop all</p></blockquote></li><li><p>重启 指定/所有 进程</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 restart (id|all)</span><br></pre></td></tr></table></figure><blockquote><p>// 重启id为0的进程<br>$ pm2 restart 0<br>// 重启所有进程<br>$ pm2 restart all</p></blockquote><ul><li>杀死 指定/所有 进程</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 delete (id|all)</span><br></pre></td></tr></table></figure><blockquote><p>// 杀死id为0的进程<br>$ pm2 delete 0<br>// 杀死所有进程<br>$ pm2 delete all</p></blockquote><h3 id="配置-PM2-启动文件"><a href="#配置-PM2-启动文件" class="headerlink" title="配置 PM2 启动文件"></a>配置 PM2 启动文件</h3><p>pm2 启动的方式可以进行很多的扩展，比如设置环境，设置错误信息打印，设置输入信息打印等等高级功能。那么一条命令就不能完成这些任务， pm2 提供了配置文件的方式来启动.</p><h4 id="pm2-config-js"><a href="#pm2-config-js" class="headerlink" title="pm2.config.js"></a>pm2.config.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">apps</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 指定解释器 ：ts用</span></span><br><span class="line">      <span class="attr">interpreter</span>: <span class="string">&#x27;./node_modules/.bin/ts-node&#x27;</span>,</span><br><span class="line">      <span class="comment">// 解释器参数 -P 表示项目路径，会自动使用项目的 tsconfig.json</span></span><br><span class="line">      <span class="attr">interpreter_args</span>: <span class="string">&#x27;-P ./ -r tsconfig-paths/register&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;next&#x27;</span>, <span class="comment">// 应用名称</span></span><br><span class="line">      <span class="attr">script</span>: <span class="string">&#x27;./server.ts&#x27;</span>, <span class="comment">// 启动文件地址</span></span><br><span class="line">      <span class="attr">cwd</span>: <span class="string">&#x27;./&#x27;</span>, <span class="comment">// 当前工作路径</span></span><br><span class="line">      <span class="attr">watch</span>: [</span><br><span class="line">        <span class="comment">// 监控变化的目录，一旦变化，自动重启</span></span><br><span class="line">        <span class="string">&#x27;.next&#x27;</span>,</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">ignore_watch</span>: [</span><br><span class="line">        <span class="comment">// 从监控目录中排除</span></span><br><span class="line">        <span class="string">&#x27;node_modules&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;logs&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;static&#x27;</span>,</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">instances</span>: <span class="number">2</span>, <span class="comment">// 负载均衡，启动2个实例</span></span><br><span class="line">      <span class="attr">node_args</span>: <span class="string">&#x27;--harmony&#x27;</span>, <span class="comment">// node的启动模式</span></span><br><span class="line">      <span class="attr">env</span>: &#123;</span><br><span class="line">        <span class="attr">NODE_ENV</span>: <span class="string">&#x27;production&#x27;</span>, <span class="comment">// 设置运行环境，此时process.env.NODE_ENV的值就是development</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">env_production</span>: &#123;</span><br><span class="line">        <span class="attr">NODE_ENV</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">out_file</span>: <span class="string">&#x27;./logs/out.log&#x27;</span>, <span class="comment">// 普通日志路径</span></span><br><span class="line">      <span class="attr">error_file</span>: <span class="string">&#x27;./logs/err.log&#x27;</span>, <span class="comment">// 错误日志路径</span></span><br><span class="line">      <span class="attr">merge_logs</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">log_date_format</span>: <span class="string">&#x27;YYYY-MM-DD HH:mm Z&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>最 666 的功能来了～自动给你做负载均衡，只需要一条命令，以前那些复杂的概念懂不懂无所谓。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start server.js -i (number|max)</span><br></pre></td></tr></table></figure><ul><li>开启三个进程运行项目<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js -i 3</span><br></pre></td></tr></table></figure></li><li> 根据机器CPU核数，开启对应数目的进程运行项目<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js -i max</span><br></pre></td></tr></table></figure>配置文件里对应的：”instance”: (number|max)<br>// pm2.config.js<br>“instances”: 2,  // 启动两个实例</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;PM2-使用手册&quot;&gt;&lt;a href=&quot;#PM2-使用手册&quot; class=&quot;headerlink&quot; title=&quot;PM2 使用手册&quot;&gt;&lt;/a&gt;PM2 使用手册&lt;/h3&gt;&lt;p&gt;对于线上项目，如果直接通过 node app 来启动，如果报错了可能直接停止导致整个服务崩溃，一般监控 node 有几种方案。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;supervisor: 一般用作开发环境的使用。&lt;/li&gt;
&lt;li&gt; forever: 管理多个站点，一般每个站点的访问量不大的情况，不需要监控。&lt;/li&gt;
&lt;li&gt;PM2: 网站的访问量比较大，需要完整的监控页面。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;开发是使用的是nodemon,部署是后端人员操作，一直没有深入使用过pm2，这次部署next项目，正好熟习一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;</summary>
    
    
    
    
    <category term="pm2" scheme="http://example.com/tags/pm2/"/>
    
  </entry>
  
  <entry>
    <title>搭建nextjs脚手架遇到的问题及解决</title>
    <link href="http://example.com/2019/05/08/%E6%90%AD%E5%BB%BAnextjs%E8%84%9A%E6%89%8B%E6%9E%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
    <id>http://example.com/2019/05/08/%E6%90%AD%E5%BB%BAnextjs%E8%84%9A%E6%89%8B%E6%9E%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</id>
    <published>2019-05-08T09:44:02.000Z</published>
    <updated>2020-01-22T08:31:50.057Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><strong>nextjs</strong>是react的ssr后端渲染框架，在搭建过程中遇到一些问题，再次记录下来。</p><ol><li>使用antd ui框架，同时使用scss预处理器，在next.config.js中同时使用<del>with-less</del>和<del>with-sass</del>,并没有达到预期中的结果，scss文件解析正常，antd样式全丢。</li><li>实现antd的按需加载</li><li>使用typescript，如何配置。<span id="more"></span></li></ol><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li>在next官网上告诉我们的with-sass,with-less串联的方法并不管用，需要自己新建next.config.js文件，配置loader。但是有个特例，<strong>with-typescript</strong>，我们把上面修改好的webpack配置传给他就可以开启typescript支持了，所有代码在下面。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> withTypescript = <span class="built_in">require</span>(<span class="string">&#x27;@zeit/next-typescript&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cssLoaderConfig = <span class="built_in">require</span>(<span class="string">&#x27;@zeit/next-css/css-loader-config&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> lessToJS = <span class="built_in">require</span>(<span class="string">&#x27;less-vars-to-js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> themeVariables = lessToJS(</span><br><span class="line">  fs.readFileSync(path.resolve(__dirname, <span class="string">&#x27;./assets/antd-custom.less&#x27;</span>), <span class="string">&#x27;utf8&#x27;</span>),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fix: prevents error when .less files are required by node</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">require</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">  <span class="built_in">require</span>.extensions[<span class="string">&#x27;.less&#x27;</span>] = <span class="function">(<span class="params">file</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = withTypescript(&#123;</span><br><span class="line">  <span class="attr">pageExtensions</span>: [<span class="string">&#x27;jsx&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;ts&#x27;</span>, <span class="string">&#x27;tsx&#x27;</span>],</span><br><span class="line">  <span class="function"><span class="title">webpack</span>(<span class="params">config, options</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!options.defaultLoaders) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">&#x27;This plugin is not compatible with Next.js versions below 5.0.0 https://err.sh/next-plugins/upgrade&#x27;</span>,</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123; dev, defaultLoaders, isServer &#125; = options;</span><br><span class="line">    <span class="comment">// const nextConfig = &#123;&#125;;</span></span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      cssModules,</span><br><span class="line">      cssLoaderOptions,</span><br><span class="line">      postcssLoaderOptions,</span><br><span class="line">      lessLoaderOptions = &#123;&#125;,</span><br><span class="line">    &#125; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;options.defaultLoaders&#x27;</span>, defaultLoaders);</span><br><span class="line"></span><br><span class="line">    config.resolve.extensions.push(<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.tsx&#x27;</span>);</span><br><span class="line">    config.resolve.alias = <span class="built_in">Object</span>.assign(&#123;&#125;, config.resolve.alias, &#123;</span><br><span class="line">      <span class="string">&#x27;@utils&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;utils&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;@assets&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;assets&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;@pages&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;pages&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;@components&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;components&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;@services&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;services&#x27;</span>),</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    defaultLoaders.less = cssLoaderConfig(config, &#123;</span><br><span class="line">      <span class="attr">extensions</span>: [<span class="string">&#x27;less&#x27;</span>],</span><br><span class="line">      cssModules,</span><br><span class="line">      cssLoaderOptions,</span><br><span class="line">      postcssLoaderOptions,</span><br><span class="line">      dev,</span><br><span class="line">      isServer,</span><br><span class="line">      <span class="attr">loaders</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: lessLoaderOptions,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    config.module.rules.push(&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      use: options.defaultLoaders.less,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 我们禁用了antd的cssModules</span></span><br><span class="line">    config.module.rules.push(&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">      include: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      use: cssLoaderConfig(config, &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;less&#x27;</span>],</span><br><span class="line">        <span class="attr">cssModules</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">cssLoaderOptions</span>: &#123;&#125;,</span><br><span class="line">        dev,</span><br><span class="line">        isServer,</span><br><span class="line">        <span class="attr">loaders</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">javascriptEnabled</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">modifyVars</span>: themeVariables,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    config.module.rules.push(&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      use: cssLoaderConfig(config, &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;scss&#x27;</span>],</span><br><span class="line">        <span class="attr">cssModules</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">cssLoaderOptions</span>: &#123;</span><br><span class="line">          <span class="attr">importLoaders</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">localIdentName</span>: <span class="string">&#x27;[local]_[hash:base64:6]&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        dev,</span><br><span class="line">        isServer,</span><br><span class="line">        <span class="attr">loaders</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;sass-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">data</span>: <span class="string">&#x27;@import &quot;_base.scss&quot;;&#x27;</span>,</span><br><span class="line">              <span class="attr">includePaths</span>: [path.resolve(<span class="string">&#x27;./styles&#x27;</span>)],</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (dev) &#123;</span><br><span class="line">      config.module.rules.push(&#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(ts|tsx|js|jsx)$/</span>,</span><br><span class="line">        enforce: <span class="string">&#x27;pre&#x27;</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="attr">configFile</span>: path.resolve(<span class="string">&#x27;.eslintrc&#x27;</span>),</span><br><span class="line">          <span class="attr">eslint</span>: &#123;</span><br><span class="line">            <span class="attr">configFile</span>: path.resolve(__dirname, <span class="string">&#x27;.eslintrc&#x27;</span>),</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">fix</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      config.devtool = <span class="string">&#x27;cheap-module-eval-source-map&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>这样less和scss,ts就可以同时使用了.</li><li>常规操作</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add  babel-plugin-impor</span><br></pre></td></tr></table></figure><p>修改babelrc (add .babelrc file in your project)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;presets&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;next/babel&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span>: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;import&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;libraryName&quot;</span>: <span class="string">&quot;antd&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;libraryDirectory&quot;</span>:<span class="string">&quot;lib&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;style&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;nextjs&lt;/strong&gt;是react的ssr后端渲染框架，在搭建过程中遇到一些问题，再次记录下来。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用antd ui框架，同时使用scss预处理器，在next.config.js中同时使用&lt;del&gt;with-less&lt;/del&gt;和&lt;del&gt;with-sass&lt;/del&gt;,并没有达到预期中的结果，scss文件解析正常，antd样式全丢。&lt;/li&gt;
&lt;li&gt;实现antd的按需加载&lt;/li&gt;
&lt;li&gt;使用typescript，如何配置。</summary>
    
    
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
    <category term="ssr" scheme="http://example.com/tags/ssr/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 16.04 安装 postgresql 10</title>
    <link href="http://example.com/2018/11/05/ubuntu-16-04-%E5%AE%89%E8%A3%85-postgresql-10/"/>
    <id>http://example.com/2018/11/05/ubuntu-16-04-%E5%AE%89%E8%A3%85-postgresql-10/</id>
    <published>2018-11-05T08:01:24.000Z</published>
    <updated>2020-01-22T08:31:50.048Z</updated>
    
    <content type="html"><![CDATA[<p>添加postgreql源</p><blockquote><p>$ wget -q <a href="https://www.postgresql.org/media/keys/ACCC4CF8.asc">https://www.postgresql.org/media/keys/ACCC4CF8.asc</a> -O - | sudo apt-key add -<br>  $ sudo sh -c ‘echo “deb <a href="http://apt.postgresql.org/pub/repos/apt/">http://apt.postgresql.org/pub/repos/apt/</a> <code>lsb_release -cs</code>-pgdg main” &gt;&gt; /etc/apt/sources.list.d/pgdg.list’</p></blockquote><p>安装 postgresql</p><blockquote><p>$ sudo apt-get update<br>  $ sudo apt-get install postgresql postgresql-contrib libpq-dev</p></blockquote><p>添加用户</p><blockquote><p>$ sudo -u postgres createuser –superuser roleuser</p></blockquote><p>设置密码</p><blockquote><p>$ sudo -u postgres psql<br>   \password postgres<br>   \q</p></blockquote><p>修改配置 pg_hba.conf</p><blockquote><p>local   all             all                                     trust #修改peer为trust</p></blockquote><p>修改设置postgresql.conf，让postgresql可远程访问</p><blockquote><p>listen_addresses = ‘*’</p></blockquote><p>在 pg_hba.conf 中添加</p><blockquote><p>host    all         all         192.168.1.0/24          md5</p></blockquote><p>192.168.1.0 ip换为自己的ip，</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;添加postgreql源&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ wget -q &lt;a href=&quot;https://www.postgresql.org/media/keys/ACCC4CF8.asc&quot;&gt;https://www.postgresql.org/media/</summary>
      
    
    
    
    
    <category term="ubuntu" scheme="http://example.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>使用travis-ci实现持续部署</title>
    <link href="http://example.com/2018/07/31/%E4%BD%BF%E7%94%A8travis-ci%E5%AE%9E%E7%8E%B0%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2018/07/31/%E4%BD%BF%E7%94%A8travis-ci%E5%AE%9E%E7%8E%B0%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/</id>
    <published>2018-07-31T10:16:17.000Z</published>
    <updated>2020-01-22T08:31:50.054Z</updated>
    
    <content type="html"><![CDATA[<p>前面已经使用travis部署自己的gitpage了，有些方法可以扩展到部署项目。这样就能够在我提交代码的时候，travis就可以就自动更新服务器的代码，并自动构建。<br>通过git clone命令把这个项目克隆到本地，然后在项目根目录下添加一个**.travis.yml**文件。这个文件是travis-ci持续集成的关键，它定义了你所有持续集成的操作。为了简单起见，我们仅仅使用它进行自动化部署：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">- &quot;10&quot;</span><br><span class="line">after_success:</span><br><span class="line">- ssh root@xxx.xxx.xxx.xxx -p yyy &#x27;cd /home/www/project &amp;&amp; git pull &amp;&amp; npm run build&#x27;</span><br></pre></td></tr></table></figure><p>配置ssh登录，前面已经写过。这样就可以登录远程服务器并完成，但是暴露密码总是不可以的…</p><h3 id="travis-免密登录"><a href="#travis-免密登录" class="headerlink" title="travis 免密登录"></a>travis 免密登录</h3><ol><li>在本地通过gem安装travis命令行工具（macOS默认支持ruby）：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install travis</span><br></pre></td></tr></table></figure>使用travis登录：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis login</span><br></pre></td></tr></table></figure>然后输入github的账号密码即可。<br>加密本地ssh-key并自动写入.travis.yml：</li></ol><p>** –add参数表示自动添加脚本到.travis.yml文件中**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis encrypt-file ~/.ssh/id_rsa --add</span><br></pre></td></tr></table></figure><p>这时会看到.travis.yml多了一段before_install的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before_install:</span><br><span class="line">- openssl aes-256-cbc -K $encrypted_e65149523857_key -iv $encrypted_e65149523857_iv</span><br><span class="line">  -in id_rsa.enc -out ~\/.ssh/id_rsa -d</span><br></pre></td></tr></table></figure><p>然后把最后一行的“\”转义符删掉，并换行顶格添加如下两条内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- chmod 600 ~/.ssh/id_rsa</span><br><span class="line">- echo -e &quot;Host xxx.xxx.xxx.xxx\n\tStrictHostKeyChecking no\n&quot; &gt;&gt; ~/.ssh/config</span><br></pre></td></tr></table></figure><p>切记把xxx.xxx.xxx.xxx换成你服务器的IP。<br>最后把添加.travis.yml的项目push到github即可。<br>重新回到travis-ci.org的页面，进入项目，就能够看到持续集成的效果了。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>使用travis登录远程服务器已经达成，拉去代码也可以，但是这次遇到一个问题：<strong>zsh:1: commad not found:npm</strong>，明明手动登录可以使用npm的，travis就不可以了呢？<br>排查了下发现原因是因为node是使用nvm管理的，npm不在**/usr/bin**下导致的，那一个解决方案就<a href="https://nodejs.org/zh-cn/download/package-manager/#debian-and-ubuntu-based-linux-distributions">通过包管理器方式安装 Nodejs</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前面已经使用travis部署自己的gitpage了，有些方法可以扩展到部署项目。这样就能够在我提交代码的时候，travis就可以就自动更新服务器的代码，并自动构建。&lt;br&gt;通过git clone命令把这个项目克隆到本地，然后在项目根目录下添加一个**.travis.yml*</summary>
      
    
    
    
    
    <category term="travis" scheme="http://example.com/tags/travis/"/>
    
  </entry>
  
  <entry>
    <title>使用SSH登录远程服务器</title>
    <link href="http://example.com/2018/07/31/%E4%BD%BF%E7%94%A8SSH%E7%99%BB%E5%BD%95%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://example.com/2018/07/31/%E4%BD%BF%E7%94%A8SSH%E7%99%BB%E5%BD%95%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2018-07-31T01:58:11.000Z</published>
    <updated>2020-01-22T08:31:50.053Z</updated>
    
    <content type="html"><![CDATA[<p>一般使用ssh访问远程服务器的命令是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh username@ip地址</span><br></pre></td></tr></table></figure><p>例如：ssh <a href="mailto:&#x72;&#x6f;&#x6f;&#x74;&#x40;&#49;&#x31;&#50;&#x2e;&#x32;&#x33;&#50;&#x2e;&#49;&#x32;&#46;&#49;&#x32;">&#x72;&#x6f;&#x6f;&#x74;&#x40;&#49;&#x31;&#50;&#x2e;&#x32;&#x33;&#50;&#x2e;&#49;&#x32;&#46;&#49;&#x32;</a>，然后输入密码即可访问。<br>&lt;–more–&gt;</p><h3 id="以Mac-OS为例，别名登录"><a href="#以Mac-OS为例，别名登录" class="headerlink" title="以Mac OS为例，别名登录"></a>以Mac OS为例，别名登录</h3><p>使用cd ~/.ssh/ 进入ssh目录，会看到有config、known_hosts两个文件，一般的没有设置的话，只会有known_hosts，可以使用touch config命令创建config文件。</p><p>使用vim编辑config文件，添加如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host txy</span><br><span class="line">HostName 1xx.1xx.1xx.1</span><br><span class="line">User root</span><br><span class="line">IdentitiesOnly yes</span><br></pre></td></tr></table></figure><p>其中：<br>1、Host 后边的是别名，以后可以根据这个名称进行访问；<br>2、HostName是你的主机IP地址；<br>3、User为主机登录的用户名；<br>4、IdentitiesOnly yes固有配置；</p><p>设置完成，后期的话使用:ssh txy 然后输入密码，就可以登录到远程主机啦！</p><h3 id="密钥登录"><a href="#密钥登录" class="headerlink" title="密钥登录"></a>密钥登录</h3><p>每次登录SH都需要输入密码很麻烦，而且可能不太安全。SSH还能使用另外一种登录方式，也就是使用密钥登录。这种登录方式需要客户端生成一堆公钥私钥对，然后将公钥添加到服务器中，这样下次就可以直接登录了。</p><p>首先生成SSH密钥，依照提示输入信息即可。默认生成在用户主目录中的.ssh文件夹中。带pub的是公钥，接下来需要添加到服务器中。</p><p>然后登陆服务器，打开.ssh文件夹，在authorized_keys中添加到对应公钥。然后退出SSH重新登陆试试，成功的话不需要输入密码就会直接进入远程服务器。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一般使用ssh访问远程服务器的命令是：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;</summary>
      
    
    
    
    
    <category term="ssh" scheme="http://example.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>将git项目推送到多个地址</title>
    <link href="http://example.com/2018/07/12/%E5%B0%86git%E9%A1%B9%E7%9B%AE%E6%8E%A8%E9%80%81%E5%88%B0%E5%A4%9A%E4%B8%AA%E5%9C%B0%E5%9D%80/"/>
    <id>http://example.com/2018/07/12/%E5%B0%86git%E9%A1%B9%E7%9B%AE%E6%8E%A8%E9%80%81%E5%88%B0%E5%A4%9A%E4%B8%AA%E5%9C%B0%E5%9D%80/</id>
    <published>2018-07-12T03:53:45.000Z</published>
    <updated>2020-01-22T08:31:50.057Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git设置"><a href="#git设置" class="headerlink" title="git设置"></a>git设置</h3><p>公司开发项目迁移，中间大约一周左右的测试期，两边地址都要上传，那么如何方便快捷的把代码托管到多个平台呢？<br>例如我有下面两个仓库： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://gitlab.com/***/doctor.git </span><br><span class="line">https://github.com/***/doctor.git</span><br></pre></td></tr></table></figure><p>先添加第一个仓库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://gitlab.com/***/doctor.git </span><br></pre></td></tr></table></figure><p>再添加第二个仓库： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url --add origin https://github.com/***/doctor.git</span><br></pre></td></tr></table></figure><p>如果还有其他，则可以像添加第二个一样继续添加其他仓库。</p><p>然后使用下面命令提交： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin --all</span><br><span class="line">或者特定分支</span><br><span class="line">git push origin [branch]</span><br></pre></td></tr></table></figure><p>打开.git/config，可以看到这样的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">  url = https://github.com/***/doctor.git</span><br><span class="line">  fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">  url = https://gitlab.com/***/doctor.git</span><br></pre></td></tr></table></figure><p>刚才的命令其实就是添加了这些配置。如果不想用命令行，可以直接编辑该文件，添加对应的url即可。<br><strong>如果两个地址的账号还不一样呢？</strong></p><h3 id="多账号ssh设置"><a href="#多账号ssh设置" class="headerlink" title="多账号ssh设置"></a>多账号ssh设置</h3><p>首先生成另一个ssh公钥， 比如id_rsa_doctor,id_rsa_doctor.pub，<br>然后配置**.ssh**文件夹下的config文件，没有的话建立。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Host default</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br><span class="line">#second 第二个账号</span><br><span class="line">Host second</span><br><span class="line">    HostName gitlab.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_doctor</span><br></pre></td></tr></table></figure><p>这样的话就可以一次操作后，提交到两个仓库地址了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;git设置&quot;&gt;&lt;a href=&quot;#git设置&quot; class=&quot;headerlink&quot; title=&quot;git设置&quot;&gt;&lt;/a&gt;git设置&lt;/h3&gt;&lt;p&gt;公司开发项目迁移，中间大约一周左右的测试期，两边地址都要上传，那么如何方便快捷的把代码托管到多个平台呢？&lt;br&gt;例如</summary>
      
    
    
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>代码分割结合 Prefetch 完美优化单页应用加载性能</title>
    <link href="http://example.com/2017/10/11/%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2%E7%BB%93%E5%90%88-Prefetch-%E5%AE%8C%E7%BE%8E%E4%BC%98%E5%8C%96%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E5%8A%A0%E8%BD%BD%E6%80%A7%E8%83%BD/"/>
    <id>http://example.com/2017/10/11/%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2%E7%BB%93%E5%90%88-Prefetch-%E5%AE%8C%E7%BE%8E%E4%BC%98%E5%8C%96%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E5%8A%A0%E8%BD%BD%E6%80%A7%E8%83%BD/</id>
    <published>2017-10-11T09:26:46.000Z</published>
    <updated>2020-01-22T08:31:50.050Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>单页应用性能的最大痛点就是 bundle 体积大导致首屏时间过长。使用 webpack 的 code splitting（代码分割）功能可以将 bundle 分片，加速首屏，但之后的交互势必会受到影响,页面变得不再流畅，稍有卡顿，所以放弃了分片，但是现在发现有webpack插件解决JS文件后加载响应慢的问题，所以记了下来。</p></blockquote><span id="more"></span><p>先说结论：比较理想的解决方案是<strong>code split</strong> + <strong>prefetch</strong> 方式，对于<del>不支持prefetch的safari浏览器</del>另做<strong>preload</strong>处理。</p><h3 id="preload"><a href="#preload" class="headerlink" title="preload"></a>preload</h3><p><strong>preload</strong> 是较新的 web 标准。他可以声明式的告诉浏览器去获取某个资源，并且可以为资源设置优先级。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;preload&quot; href=&quot;<span class="attribute">font</span><span class="selector-class">.woff2</span>&quot; as=&quot;<span class="attribute">font</span>&quot; type=&quot;<span class="attribute">font</span>/woff2&quot; crossorigin&gt;</span><br></pre></td></tr></table></figure><p>preload <strong>加载资源后并不会执行</strong>，可以安全的预加载 JavaScript。我们一般使用 preload 来主动通知浏览器获取本页的关键资源。现在浏览器都有 Preloader，可以尽早发现大多数基于标记语言的资源，但依然存在一些隐藏在 CSS 和 JavaScript 中的资源，例如字体文件，其为首屏关键资源又隐藏在 CSS 中。这种场景适合使用 preload 进行声明，尽早进行资源加载，避免页面渲染延迟。<br>preload 的更多细节可参考文章 Preload: <a href="https://www.smashingmagazine.com/2016/02/preload-what-is-it-good-for/">What Is It Good For?</a>，它适合用来预加载被隐藏的首屏关键资源。preload 的兼容性并不理想，目前只有最新版的 chrome 和 safari 才支持。</p><h3 id="prefetch"><a href="#prefetch" class="headerlink" title="prefetch"></a>prefetch</h3><p>使用 prefetch 声明的资源是对浏览器的提示，<strong>暗示该资源可能『未来』会被用到</strong>，适用于对可能跳转到的其他路由页面进行资源缓存。被 prefetch 的资源的加载时机由浏览器决定，一般来说优先级较低，会在浏览器『空闲』时进行下载。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;prefetch&quot; href=&quot;//example<span class="selector-class">.com</span>/industry-qualification-audit/js/common-<span class="selector-tag">main</span>.<span class="number">550</span>d4<span class="selector-class">.chunk</span><span class="selector-class">.js</span>&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;prefetch&quot; href=&quot;//example<span class="selector-class">.com</span>/industry-qualification-audit/js/Food.<span class="number">86661</span><span class="selector-class">.chunk</span><span class="selector-class">.js</span>&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;prefetch&quot; href=&quot;//example<span class="selector-class">.com</span>/industry-qualification-audit/js/Pub.<span class="number">9045</span>b<span class="selector-class">.chunk</span><span class="selector-class">.js</span>&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;prefetch&quot; href=&quot;//example<span class="selector-class">.com</span>/industry-qualification-audit/js/Screencast.<span class="number">1</span>eb1a<span class="selector-class">.chunk</span><span class="selector-class">.js</span>&quot;&gt;</span><br></pre></td></tr></table></figure><p>由于关键资源 main.js 已被切分，体积小加载快，prefetch 的资源也未发生抢占带宽的现象，实际效果还是比较符合期望的。<br>prefetch 的兼容性稍好，chrome、firefox、edge、android 4.4+ 都支持，但 safari、IE11-、iOS safari 始终未支持。</p><h2 id="3-结论"><a href="#3-结论" class="headerlink" title="3. 结论"></a>3. 结论</h2><p>经过分析，资源加载方式简单总结如下：<br><strong>首屏关键资源</strong>：优先级高，使用阻塞方式载入，若有隐藏在 CSS、JavaScript 内部的关键资源（如字体），可使用 preload 声明提前开始加载。<br><strong>首屏非关键资源</strong>（第三方插件，如广告、评论、统计、分享）：优先级低，若无执行顺序要求，可使用 async 进行异步加载，但应警惕 onload 事件延迟现象（很多插件和业务逻辑都依赖 onload 事件），若产生了性能问题最好在 onload 事件后手动加载。<br><strong>非首屏资源</strong>（如其他路由的分片 thunk）：优先级最低，可使用 prefetch 声明进行预加载。在 safari、iOS 等不支持 prefetch 的浏览器上，在 onload 事件后手动进行加载。<br>单页应用的分片 <strong>thunk 为非首屏资源</strong>，可以采用 prefetch + onload 手动加载的方式实现全平台的预加载。prefetch 可以使用<a href="https://github.com/GoogleChrome/preload-webpack-plugin"> <strong>preload-webpack-plugin</strong></a> 插件自动打入，preload可以使用<a href="https://github.com/jin5354/prefetch-polyfill-webpack-plugin">prefetch-polyfill-webpack-plugin</a>,可以自动生成在 onload 事件触发时执行的 prefetch polyfill 函数，由于其身份是作为 prefetch 的补足，所以仅在 IE、safari、iOS 上执行，可选择使用 image 或者 async模式 对分片 thunk 做预加载。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: path.join(__dirname, <span class="string">&#x27;src/index.html&#x27;</span>),</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">      <span class="attr">minify</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">inject</span>: <span class="string">&#x27;body&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> PreloadWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">rel</span>: <span class="string">&#x27;prefetch&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> PrefetchPolyfillPlugin(&#123;</span><br><span class="line">      <span class="attr">mode</span>: <span class="string">&#x27;async&#x27;</span>,</span><br><span class="line">    &#125;),</span><br></pre></td></tr></table></figure><p>经过这样细致的优化，就可以保证我们的单页应用既有快速的首屏响应时间，又能享受流畅的交互体验了。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;单页应用性能的最大痛点就是 bundle 体积大导致首屏时间过长。使用 webpack 的 code splitting（代码分割）功能可以将 bundle 分片，加速首屏，但之后的交互势必会受到影响,页面变得不再流畅，稍有卡顿，所以放弃了分片，但是现在发现有webpack插件解决JS文件后加载响应慢的问题，所以记了下来。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="webpack" scheme="http://example.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>使用babel-preset-env替代babel-preset-es2015</title>
    <link href="http://example.com/2017/10/02/%E4%BD%BF%E7%94%A8babel-preset-env%E6%9B%BF%E4%BB%A3babel-preset-es2015/"/>
    <id>http://example.com/2017/10/02/%E4%BD%BF%E7%94%A8babel-preset-env%E6%9B%BF%E4%BB%A3babel-preset-es2015/</id>
    <published>2017-10-02T11:12:01.000Z</published>
    <updated>2020-01-22T08:31:50.053Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Babel</strong> 是每个 FEer/Node.js 的使用者都会使用的一个代码转(bian)换(yi)器，它可以把 ES6、ES7 等语法转换成 ES5 的语法，使其能在更多环境下运行。</p></blockquote><p>但是随着浏览器和 Node.js 的版本迭代，他们对新语法的支持也越来越好。但是非常尴尬的是，我们总是使用 Babel 把所有代码一股脑转换成 ES5。这意味着我们抛弃了性能优秀的 let、const 关键字，放弃了简短的代码，而选择了又长又丑像坨屎的经过变换后的代码。</p><p>即使仅仅将代码跑在对 ES5 支持度在 99% 的 Node 6，一旦使用了 import 关键字，你就得用 Babel 对代码进行转换，一般还是全部转换为 ES5，辣鸡 Node.js 竟然还不支持 import 和 export。</p><h2 id="那有没有什么工具能智能识别当前运行环境，并且进行适当的转换，以及填充适当的-polyfill-呢？"><a href="#那有没有什么工具能智能识别当前运行环境，并且进行适当的转换，以及填充适当的-polyfill-呢？" class="headerlink" title="那有没有什么工具能智能识别当前运行环境，并且进行适当的转换，以及填充适当的 polyfill 呢？"></a>那有没有什么工具能智能识别当前运行环境，并且进行适当的转换，以及填充适当的 <strong>polyfill</strong> 呢？</h2><span id="more"></span><p>还真有，而且是 Babel 官方提供的，一个名为 <strong>babel-preset-env</strong> 的插件。它不需要你自行添加任何 preset，比如我们最常用的 es2015，它能根据设置智能转换代码。</p><p>具体的配置方法自行看<a href="https://github.com/babel/babel-preset-env#options">文档</a>，很容易能看懂，这里就提一下值得特别注意的部分。</p><ol><li>如果在 .babelrc 中仅仅使用下面的设置的话，那 babel-preset-env 会执行与 babel-preset-latest 一样的转换。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;env&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>targets.browsers 需要使用 browserslist 的配置方法，但是其设置会被 targets.[chrome, opera, edge, firefox, safari, ie, ios, android, node, electron] 覆盖。</li><li>targets.node 设置为 true 或 “current” 可以根据当前 Node.js 版本进行动态转换。也可以设置为具体的数字表示需要支持的最低的 Node.js 版本。</li><li>targets.uglify 会把代码完全转换为 ES5 以支持压缩 JS 代码。</li><li>include 和 exclude 可以当作是白名单和黑名单，分别表示一定会执行的转换和一定不会执行的转换，其项是数组。</li><li>useBuiltIns 可以根据之前的配置自行添加 polyfill，默认不开启。安装 babel-polyfill 后只要引入一次就行：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;babel-polyfill&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="干货"><a href="#干货" class="headerlink" title="干货"></a>干货</h3>作为一个仅仅使用 Node 执行的项目，你可以用下面的 .babelrc 文件：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">    [<span class="string">&quot;env&quot;</span>, &#123;</span><br><span class="line">      <span class="string">&quot;targets&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;node&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>前端项目：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>:[</span><br><span class="line">    [<span class="string">&quot;env&quot;</span>, &#123;</span><br><span class="line">      <span class="string">&quot;modules&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;targets&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;browsers&quot;</span>: [<span class="string">&quot;&gt; 1%&quot;</span>, <span class="string">&quot;last 2 versions&quot;</span>, <span class="string">&quot;not ie &lt;= 8&quot;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&quot;stage-2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;react-app&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;comments&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;transform-runtime&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>最后，别忘了安装 babel-cli，毕竟你还需要使用 babel-node 来执行代码。</li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Babel&lt;/strong&gt; 是每个 FEer/Node.js 的使用者都会使用的一个代码转(bian)换(yi)器，它可以把 ES6、ES7 等语法转换成 ES5 的语法，使其能在更多环境下运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是随着浏览器和 Node.js 的版本迭代，他们对新语法的支持也越来越好。但是非常尴尬的是，我们总是使用 Babel 把所有代码一股脑转换成 ES5。这意味着我们抛弃了性能优秀的 let、const 关键字，放弃了简短的代码，而选择了又长又丑像坨屎的经过变换后的代码。&lt;/p&gt;
&lt;p&gt;即使仅仅将代码跑在对 ES5 支持度在 99% 的 Node 6，一旦使用了 import 关键字，你就得用 Babel 对代码进行转换，一般还是全部转换为 ES5，辣鸡 Node.js 竟然还不支持 import 和 export。&lt;/p&gt;
&lt;h2 id=&quot;那有没有什么工具能智能识别当前运行环境，并且进行适当的转换，以及填充适当的-polyfill-呢？&quot;&gt;&lt;a href=&quot;#那有没有什么工具能智能识别当前运行环境，并且进行适当的转换，以及填充适当的-polyfill-呢？&quot; class=&quot;headerlink&quot; title=&quot;那有没有什么工具能智能识别当前运行环境，并且进行适当的转换，以及填充适当的 polyfill 呢？&quot;&gt;&lt;/a&gt;那有没有什么工具能智能识别当前运行环境，并且进行适当的转换，以及填充适当的 &lt;strong&gt;polyfill&lt;/strong&gt; 呢？&lt;/h2&gt;</summary>
    
    
    
    
    <category term="babel" scheme="http://example.com/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>create-react-app和express共同组建的开发环境</title>
    <link href="http://example.com/2017/07/20/create-react-app%E5%92%8Cexpress%E5%85%B1%E5%90%8C%E7%BB%84%E5%BB%BA%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/2017/07/20/create-react-app%E5%92%8Cexpress%E5%85%B1%E5%90%8C%E7%BB%84%E5%BB%BA%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</id>
    <published>2017-07-20T08:55:32.000Z</published>
    <updated>2020-01-22T08:31:50.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="脚手架介绍"><a href="#脚手架介绍" class="headerlink" title="脚手架介绍"></a>脚手架介绍</h2><blockquote><p>在这个环境下，Facebook 提供了一套不需要配置的 React 开发方案，即create-react-app。这个脚手架已经做好了基础 webpack 配置，带有自动更新，错误提示等等功能，仅仅需要创建，启动就可以快速开发。</p></blockquote><p>这时也不得不提前端社区的另一个崛起者：<strong>yarn</strong>。</p><span id="more"></span><p>Yarn与 npm 一样，是一款 NodeJS 包管理工具。 为何要选择使用 yarn 呢？官网的描述是：</p><blockquote><p>Yarn 会缓存它下载的每个包，所以不需要重复下载。它还能并行化操作以最大化资源利用率，所以安装速度之快前所未有。</p></blockquote><blockquote><p>Yarn 在每个安装包的代码执行前使用校验码验证包的完整性。</p></blockquote><blockquote><p>Yarn 使用一个格式详尽但简洁的 lockfile 和一个精确的算法来安装，能够保证在一个系统上的运行的安装过程也会以同样的方式运行在其他系统上。<br>选用 Yarn 的原因也是因为他的速度提升比npm 要快，使用yarn add <package-name> ，yarn remove <package-name> 增删 node 包（对应npm install和npm uninstall）.</p></blockquote><blockquote><p>另一点是，yarn 在更新之后，集成了create, 通过yarn create，可以快速启动一个项目。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn create react-app my-app</span><br><span class="line">yarn create react-native-app my-app</span><br><span class="line">yarn create next-app my-app</span><br></pre></td></tr></table></figure><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>假设我们需要创建一个demo-app项目：</p><h4 id="创建目录yarn-create-react-app-demo-app"><a href="#创建目录yarn-create-react-app-demo-app" class="headerlink" title="创建目录yarn create react-app demo-app"></a>创建目录yarn create react-app demo-app</h4><p>稍等片刻，yarn 会为我们创建一个目录，拉取依赖，wepack 的配置通过 yarn 来调用，可以看到目录结构很干净</p><h4 id="开始开发：cd-demo-app-amp-amp-yarn-start"><a href="#开始开发：cd-demo-app-amp-amp-yarn-start" class="headerlink" title="开始开发：cd demo-app &amp;&amp; yarn start"></a>开始开发：cd demo-app &amp;&amp; yarn start</h4><p>这时会启动一个默认端口为3000的页面，如果端口冲突，会提示你是否选用另一个端口<br>进入src目录开始开发即可</p><p>开发完成后需要发布时，运行yarn build进行编译，发布build目录<br>创建完成会自动生成build文件夹，将 js,css 文件放入 static 目录中,发布build目录即可</p><p>三部曲完成，中间省略了非常多配置问题，给需要快速构建项目带来了极大的便利性。当然，默认配置也许不能够满足所有需求，create-react-app也提供了 抛出所有配置项的yarn eject供给开发者使用，如果需要到调整 webpack 的内容，就需要使用到这个命令。不过这样也会导致不能再回滚。官方的更新比较快，如果不是必要的情况建议直接使用内置的行为。</p><h2 id="配合-Express-构建-server-端应用"><a href="#配合-Express-构建-server-端应用" class="headerlink" title="配合 Express 构建 server 端应用"></a>配合 Express 构建 server 端应用</h2><p>如果在项目开发过程中需要 express 构建server 端应用，那么开发模式就需要有小调整。</p><p>首先创建一个叫server的文件夹和初始化 package.json文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir server &amp;&amp; cd server &amp;&amp; yarn init</span><br></pre></td></tr></table></figure><h4 id="增加依赖包"><a href="#增加依赖包" class="headerlink" title="增加依赖包"></a>增加依赖包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add express body-parser nodemon babel-cli babel-preset-es2015</span><br></pre></td></tr></table></figure><p>主要用到express, body-parser, nodemon（检测node.js 改动并自动重启，适用于开发阶段）,babel-cli和babel-preset-es2015(以便使用 es6开发)<br>修改package.json，增加npm scripts</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;scripts&quot;: &#123;</span><br><span class="line">     &quot;start&quot;: &quot;nodemon --exec babel-node -- ./server.js&quot;,</span><br><span class="line">     &quot;build&quot;: &quot;babel ./server.js --out-file server-compiled.js&quot;,</span><br><span class="line">     &quot;serve&quot;: &quot;node server-compiled.js&quot;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这里使用nodemon在开发阶段检测node.js 改动并自动重启<br>发布build的时候则通过 babel编译成 es5的文件<br>create-react-app会启动一个静态资源服务器，那么同时需要进行 server 端的时候需要怎么做呢？</p><p>我们回过头来去修改一下demo-app目录下的package.json。</p><p>create-react-app会默认添加好3段scripts:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;react-scripts start&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;react-scripts build&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;react-scripts test --env=jsdom&quot;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我们需要对 start和build做调整，以便可以同时启动前端开发页面以及后端服务。在这里引入concurrently这个包来执行两条命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add concurrently</span><br></pre></td></tr></table></figure><p>package.json:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;react-start&quot;: &quot;react-scripts start&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;concurrently &#x27;yarn react-start&#x27; &#x27;cd server &amp;&amp; yarn start&#x27;&quot;,</span><br><span class="line">    &quot;react-build&quot;: &quot;react-scripts build&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;concurrently &#x27;yarn react-build&#x27; &#x27;cd server &amp;&amp; yarn build&#x27;&quot;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>这样，我们只要执行yarn start会同步启动 webpack 以及 server文件夹下的 nodeman.</p><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><p>如果我们在前端页面用使用fetch(/api/data)这样 请求，默认是会发送到create-react-app 启动的 localhost:3000/api/data去的，无法达到目的。为了指向 server 端，需要指定proxy:</p><p>假设 server 端 express 启动了5000端口，则需要在package.json中增加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;proxy&quot;: &quot;http://127.0.0.1:5000&quot;</span><br></pre></td></tr></table></figure><p>这时当你使用fetch(/api/data)请求，则会指向到localhost:5000/api/data</p><p>轻松的开始开发吧~</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;脚手架介绍&quot;&gt;&lt;a href=&quot;#脚手架介绍&quot; class=&quot;headerlink&quot; title=&quot;脚手架介绍&quot;&gt;&lt;/a&gt;脚手架介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在这个环境下，Facebook 提供了一套不需要配置的 React 开发方案，即create-react-app。这个脚手架已经做好了基础 webpack 配置，带有自动更新，错误提示等等功能，仅仅需要创建，启动就可以快速开发。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这时也不得不提前端社区的另一个崛起者：&lt;strong&gt;yarn&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="express" scheme="http://example.com/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>ES7 and ES8 特性</title>
    <link href="http://example.com/2017/07/18/ES7-and-ES8-%E7%89%B9%E6%80%A7/"/>
    <id>http://example.com/2017/07/18/ES7-and-ES8-%E7%89%B9%E6%80%A7/</id>
    <published>2017-07-18T05:56:47.000Z</published>
    <updated>2020-01-22T08:31:50.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES8-was-Released"><a href="#ES8-was-Released" class="headerlink" title="ES8 was Released"></a>ES8 was Released</h2><blockquote><p>虽然现在开发已经都在用es6，一个不注意，都到了es8了。记录一下新增加的常用功能，方便查阅。</p></blockquote><h2 id="ES7-特性："><a href="#ES7-特性：" class="headerlink" title="ES7 特性："></a>ES7 特性：</h2><ol><li>Array.prototype.includes</li><li>Exponentiation Operator(求冥运算)</li></ol><h2 id="ES8-特性"><a href="#ES8-特性" class="headerlink" title="ES8 特性"></a>ES8 特性</h2><ol><li>Object.values/Object.entries</li><li>String padding(字符串填充)</li><li>Object.getOwnPropertyDescriptors</li><li>函数参数列表和调用中的尾逗号（Trailing commas）</li><li>异步函数（Async Functions）<span id="more"></span><h3 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes"></a>Array.prototype.includes</h3>Array.prototype.includes用法都容易和简单。它是一个替代indexOf，开发人员用来检查数组中是否存在值，indexOf是一种尴尬的使用，因为它返回一个元素在数组中的位置或者-1当这样的元素不能被找到的情况下。所以它返回一个数字，而不是一个布尔值。开发人员需要实施额外的检查。<br>在ES6，要检查是否存在值你需要做一些如下所示小技巧，因为他们没有匹配到值，Array.prototype.indexOf返回-1变成了true（转换成true），但是当匹配的元素为0位置时候，该数组包含元素，却变成了false<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;angular&#x27;</span>, <span class="string">&#x27;vue&#x27;</span>]</span><br><span class="line"><span class="comment">// WRONG</span></span><br><span class="line"><span class="keyword">if</span> (arr.indexOf(<span class="string">&#x27;react&#x27;</span>)) &#123; <span class="comment">// 0 -&gt; evaluates to false, definitely as we expected</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Can use React&#x27;</span>) <span class="comment">// this line would never be executed</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="keyword">if</span> (arr.indexOf(<span class="string">&#x27;react&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Can use React&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>或者使用一点点hack 位运算符 ~ 使代码更加紧凑一些，因为~（位异或）对任何数字相当于-(a + 1):<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;angular&#x27;</span>, <span class="string">&#x27;vue&#x27;</span>]</span><br><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="keyword">if</span> (~arr.indexOf(<span class="string">&#x27;react&#x27;</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Can use React&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在ES7中使用includes代码如下:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;angular&#x27;</span>, <span class="string">&#x27;vue&#x27;</span>]</span><br><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="keyword">if</span> (arr.includes(<span class="string">&#x27;react&#x27;</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Can use React&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 开发者还能在字符串中使用includes:</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;React Quickly&#x27;</span></span><br><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="keyword">if</span> (str.toLowerCase().includes(<span class="string">&#x27;react&#x27;</span>)) &#123;  <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Found &quot;react&quot;&#x27;</span>)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Exponentiation-Operator-求冥运算"><a href="#Exponentiation-Operator-求冥运算" class="headerlink" title="Exponentiation Operator(求冥运算)"></a>Exponentiation Operator(求冥运算)</h3>求冥运算大多数是为开发者做一些数学计算，对于3D，VR，SVG还有数据可视化非常有用。<br>在ES6或者早些版本，你不得不创建一个循环，创建一个递归函数或者使用Math.pow,如果你忘记了什么是指数,当你有相同数字（基数）自相相乘多次（指数）。例如，7的3次方是7<em>7</em>7</li></ol><p>现在在ES7 /ES2016，以数学向导的开发者可以使用更短的语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">7</span> ** <span class="number">12</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span> ** <span class="number">7</span></span><br><span class="line"><span class="built_in">console</span>.log(a === <span class="built_in">Math</span>.pow(<span class="number">7</span>,<span class="number">12</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(b === <span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">7</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 开发者还可以操作结果:</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">7</span></span><br><span class="line">a **= <span class="number">12</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line">b **= <span class="number">7</span></span><br><span class="line"><span class="built_in">console</span>.log(a === <span class="built_in">Math</span>.pow(<span class="number">7</span>,<span class="number">12</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(b === <span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">7</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="Object-values-Object-entries"><a href="#Object-values-Object-entries" class="headerlink" title="Object.values/Object.entries"></a>Object.values/Object.entries</h3><p><strong>Object.entries</strong> 和 <strong>Object.values</strong>是在ES2017规格中，它和Object.keys类似，返回数组类型，其序号和<strong>Object.keys</strong>序号对应。</p><p>Object.entries,Object.values和Object.keys各自项<strong>返回是数组</strong>，相对应包括key,value或者可枚举特定对象property/attribute</p><p>在ES8 /ES2017之前，Javascript开发者需要迭代一个对象的自身属性时候不得不用Object.keys，通过迭代且使用obj[key]获取value值返回一个数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj).forEach(<span class="function">(<span class="params">key, index</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, obj[key])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>而使用ES6/ES2015 中for/of稍微好点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, obj[key])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你使用老方式for/in(ES5)也许用的非常好。但是他会迭代所有可以枚举属性（像原型中的带名字的-see MDN）,不仅仅自己的属性，会意外的破坏那些 像prototype和tostring得到意想不到的值。<br>Object.values返回对象自身可以迭代属性值（values）为数组类型。我们最好使用Array.prototype.forEach迭代它，结合ES6的箭头函数隐形返回值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">Object</span>.values(obj).forEach(<span class="function"><span class="params">value</span>=&gt;</span><span class="built_in">console</span>.log(value)) <span class="comment">// 1, 2, 3</span></span><br></pre></td></tr></table></figure><p>或者使用for/of:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">Object</span>.values(obj).forEach(<span class="function"><span class="params">value</span>=&gt;</span><span class="built_in">console</span>.log(value)) <span class="comment">// 1, 2, 3</span></span><br></pre></td></tr></table></figure><p><strong>Object.entries</strong>，在另一方面，将会返回对象自身可迭代属性key-value对数组（作为一个数组），他们（key-value）分别以数组存放数组中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="built_in">Object</span>.entries(obj))</span><br><span class="line"><span class="string">&quot;[[&quot;</span>a<span class="string">&quot;,1],[&quot;</span>b<span class="string">&quot;,2],[&quot;</span>c<span class="string">&quot;,3]]&quot;</span></span><br></pre></td></tr></table></figure><p>我们可以使用ES6/ES2015解构（需要深入了解解构请点击这篇文章和课程）,从这嵌套数组中分别声明key和value</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">Object</span>.entries(obj).forEach(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span> is <span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// a is 1, b is 2, c is 3</span></span><br></pre></td></tr></table></figure><p>你可以猜一猜，我们同样使用ES6for/of（毕竟全部都是数组）遍历Object.entries返回来的结果值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(obj)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span> is <span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a is 1, b is 2, c is 3</span></span><br></pre></td></tr></table></figure><p>现在从对象中提取values和key-value pairs 变得非常容易了。Object.values和Object.entries这种方式不想之前 Object.keys(自身属性key+顺序相同)结合for/of(ES6)一起，我们不仅仅可以提取他们还可以迭代他们。</p><h3 id="字符填充函数padStart-和-padEnd"><a href="#字符填充函数padStart-和-padEnd" class="headerlink" title="字符填充函数padStart 和 padEnd"></a>字符填充函数padStart 和 padEnd</h3><p><strong>String.prototype.padStart</strong> 和 <strong>String.prototype.padEnd</strong>在javascript字符操作是一个不错的体验，帮助避免依赖而外的库。<br>padStart()在开始部位填充，返回一个给出长度的字符串，填充物给定字符串，把字符串填充到期望的长度。从字符串的左边开始（至少大部分西方语言），一个经典例子是使用空格创建列：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;react&#x27;</span>.padStart(<span class="number">10</span>).length)         <span class="comment">// &quot;       react&quot; is 10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;backbone&#x27;</span>.padStart(<span class="number">10</span>).length)         <span class="comment">// &quot;  backbone&quot; is 10</span></span><br></pre></td></tr></table></figure><p>它对于财务方面非常有用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;0.00&#x27;</span>.padStart(<span class="number">20</span>))             </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;10,000.00&#x27;</span>.padStart(<span class="number">20</span>))    </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;250,000.00&#x27;</span>.padStart(<span class="number">20</span>))</span><br><span class="line"><span class="comment">// 这结果作为一个会计总账格式非常漂亮：</span></span><br><span class="line">                <span class="number">0.00</span></span><br><span class="line">           <span class="number">10</span>,<span class="number">000</span><span class="number">.00</span></span><br><span class="line">          <span class="number">250</span>,<span class="number">000</span><span class="number">.00</span></span><br></pre></td></tr></table></figure><p>第二个参数，让我们放一些其他的填充字符替代空字符串，一个字符串填充：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;react&#x27;</span>.padStart(<span class="number">10</span>, <span class="string">&#x27;_&#x27;</span>))         <span class="comment">// &quot;_____react&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;backbone&#x27;</span>.padStart(<span class="number">10</span>, <span class="string">&#x27;*&#x27;</span>))         <span class="comment">// &quot;**backbone&quot;</span></span><br></pre></td></tr></table></figure><p>padEnd顾名思义就是从字符串的尾端右边开始填充。第二个参数，你能实际上用一个任何长度的字符串。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;react&#x27;</span>.padEnd(<span class="number">10</span>, <span class="string">&#x27;:-)&#x27;</span>))         <span class="comment">// &quot;react:-):-&quot; is 10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;backbone&#x27;</span>.padEnd(<span class="number">10</span>, <span class="string">&#x27;*&#x27;</span>))         <span class="comment">// &quot;backbone**&quot; is 10</span></span><br></pre></td></tr></table></figure><h3 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors"></a>Object.getOwnPropertyDescriptors</h3><p>这新的 <strong>Object.getOwnPropertyDescriptors</strong>返回对象obj所有自身属性描述。这是一个多参数版本的Object.getOwnPropertyDescriptors(obj,propName)将会返回obj中propName属性的一个单独描述。<br>在我们日常不可变编程（immutable programming）时代中，有了这个方法很方便（记住,Javascript中对象是引用传递）在ES5中，开发者要使用Object.assign()来拷贝对象, Object.assign()分配属性只有copy和定义新的属性。当我们使用更加复杂对象和类原型，这可能会出问题。<br>Object.getOwnPropertyDescriptors允许创建真实的对象浅副本并创建子类,它通过给开发者描述符来做到这一点.在Object.create(prototype, object)放入描述符后，返回一个真正的浅拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.create(</span><br><span class="line">  <span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>或者你可以合并两个对象target和source如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperties(</span><br><span class="line">  target,</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(source)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>以上是Object.getOwnPropertyDesciptors用法。但是什么是描述符(descriptor)呢？就是一个对象的描述，废话！<br>好吧！好吧，让我们挖掘一下描述符一点点多信息。这里有两种描述符号类型：</p><ol><li>数据描述符（Data descriptor）</li><li>存取器描述符（Accessor descriptor）<br>存取描述符有必须属性：get 或者set或者get和set两个就是如你所想的getter和setter函数，然后存取描述符还有可选属性configurable和enumerable<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> azatsBooks = &#123;  </span><br><span class="line">  <span class="attr">books</span>: [<span class="string">&#x27;React Quickly&#x27;</span>],</span><br><span class="line">  get latest () &#123;</span><br><span class="line">    <span class="keyword">let</span> numberOfBooks = <span class="built_in">this</span>.books.length</span><br><span class="line">    <span class="keyword">if</span> (numberOfBooks == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.books[numberOfBooks - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>这个例子数据描述符books由Object.getOwnPropertyDescriptor(azatsBooks, ‘books’)产生结果如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span></span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attr">value</span>: <span class="built_in">Array</span>[<span class="number">1</span>]</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attr">__proto__</span>: <span class="built_in">Object</span></span><br></pre></td></tr></table></figure></li></ol><p>同样的，Object.getOwnPropertyDescriptor(azatsBooks, ‘latest’)将会展现latest的描述符，这个latest（get）存取器描述符展现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span></span><br><span class="line">    <span class="attr">configurable</span>: truee</span><br><span class="line">    <span class="attr">numerable</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attr">get</span>: latest()</span><br><span class="line">    <span class="attr">set</span>: <span class="literal">undefined</span></span><br><span class="line">    <span class="attr">__proto__</span>: <span class="built_in">Object</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在我们调用新方法获取所有的描述符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptors(azatsBooks))</span><br></pre></td></tr></table></figure><p>它会给出这个对象两个描述符books和latest：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span></span><br><span class="line">  <span class="attr">books</span>: <span class="built_in">Object</span></span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attr">value</span>: <span class="built_in">Array</span>[<span class="number">1</span>]</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attr">__proto__</span>: <span class="built_in">Object</span></span><br><span class="line">  <span class="attr">latest</span>: <span class="built_in">Object</span></span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attr">get</span>: latest()</span><br><span class="line">    <span class="attr">set</span>: <span class="literal">undefined</span></span><br><span class="line">    <span class="attr">__proto__</span>: <span class="built_in">Object</span></span><br><span class="line">  <span class="attr">__proto__</span>: <span class="built_in">Object</span></span><br></pre></td></tr></table></figure><h3 id="函数参数列表和调用中的尾逗号"><a href="#函数参数列表和调用中的尾逗号" class="headerlink" title="函数参数列表和调用中的尾逗号"></a>函数参数列表和调用中的尾逗号</h3><p>尾逗号在函数定义中只是一个纯粹语法变化，在ES5中，将会非法语法，在函数参数后面应该是没有逗号的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">a,</span></span></span><br><span class="line"><span class="params"><span class="function">  b,</span></span></span><br><span class="line"><span class="params"><span class="function">  c,</span></span></span><br><span class="line"><span class="params"><span class="function">  d</span>) </span>&#123; <span class="comment">// NO COMMA!</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">console</span>.log(d)</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;this&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在ES8中，这种尾逗号是没有问题的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">a,</span></span></span><br><span class="line"><span class="params"><span class="function">  b,</span></span></span><br><span class="line"><span class="params"><span class="function">  c,</span></span></span><br><span class="line"><span class="params"><span class="function">  d,</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123; <span class="comment">// COMMA? OK!</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">console</span>.log(d)</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;this&#x27;</span>)</span><br></pre></td></tr></table></figure><p>现在，函数中尾逗号是向数组（ES3）中和字面量对象（ES5）中尾逗号看齐。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,  <span class="comment">// Length == 3</span></span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">3</span>,</span><br><span class="line">]  <span class="comment">// &lt;--- ok</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>,  <span class="comment">// Only 3 properties</span></span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">&#125;  <span class="comment">// &lt;--- ok</span></span><br></pre></td></tr></table></figure><p>更不用说他是无用友好的。<br>尾逗号主要有用在使用多行参数风格（典型的是那些很长的参数名），开发者终于可以忘记逗号放在第一位这种奇怪的写法。自从逗号bugs主要原因就是使用他们。而现在你可以到处使用逗号，甚至最后参数都可以。</p><h3 id="异步函数"><a href="#异步函数" class="headerlink" title="异步函数"></a>异步函数</h3><p>异步函数（或者<strong>async</strong>/<strong>await</strong>）特性操作是Promise最重要的功能。所以你大概进一步阅读他们或者看一个进修视频课程来。这种想法是为了在写异步代码中简化它，因为人类大脑最讨厌这种平行非序号思维了。它只是不会演变这种方式。<br>对于我个人来说，我不喜欢Promise，就仅仅相比callback显得特别冗余。幸运的是，在ES8，异步函数是那么给力。开发者定义一个asyc函数里面不包含或者包含await 基于Promise异步操作。在这引擎之下一个异步函数返回一个Promise，无论无何你在任何地方不会看到这样的一个词（注：Promise）(当然了，你非的自己使用)。<br>例如，在ES6中我们可以使用Promise，Axios库向GraphQL服务器发送一个请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">`/q?query=<span class="subst">$&#123;query&#125;</span>`</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> response.data)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.props.processfetchedData(data) <span class="comment">// Defined somewhere else</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</span><br></pre></td></tr></table></figure><p>任何一个Promise库都能兼容新的异步函数，我们可以使用同步try/catch做错误处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> fetchData(url) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.get(<span class="string">`/q?query=<span class="subst">$&#123;query&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">const</span> data = response.data</span><br><span class="line">    <span class="built_in">this</span>.props.processfetchedData(data)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>异步函数返回一个Promise，所以我们像下面可以继续执行流程:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> fetchData(query) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.get(<span class="string">`/q?query=<span class="subst">$&#123;query&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">const</span> data = response.data</span><br><span class="line">      <span class="keyword">return</span> data</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fetchData(query).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.props.processfetchedData(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>你可以看到这段代码在(Babel REPL)生效。请注意，这个例子中，Axios库被代替的，是通过模拟来做相同功能，而HTTP请求通过setTimout代替：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> axios = &#123;  <span class="comment">// mocks</span></span><br><span class="line">  <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(&#123;<span class="attr">data</span>: x&#125;)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="keyword">let</span> query = <span class="string">&#x27;mangos&#x27;</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchData</span>(<span class="params">query</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.get(<span class="string">`/q?query=<span class="subst">$&#123;query&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">const</span> data = response.data</span><br><span class="line">      <span class="keyword">return</span> data</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fetchData(query).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data) <span class="comment">// Got data 2s later... Can use data!</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>有了 async/await,我们的代码执行异步看起来像执行同步一样。可以从头到尾读起来非常简单和易懂，因为出现结果顺序和函数题中从头到尾顺序一样.</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ES8-was-Released&quot;&gt;&lt;a href=&quot;#ES8-was-Released&quot; class=&quot;headerlink&quot; title=&quot;ES8 was Released&quot;&gt;&lt;/a&gt;ES8 was Released&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;虽然现在开发已经都在用es6，一个不注意，都到了es8了。记录一下新增加的常用功能，方便查阅。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;ES7-特性：&quot;&gt;&lt;a href=&quot;#ES7-特性：&quot; class=&quot;headerlink&quot; title=&quot;ES7 特性：&quot;&gt;&lt;/a&gt;ES7 特性：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Array.prototype.includes&lt;/li&gt;
&lt;li&gt;Exponentiation Operator(求冥运算)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;ES8-特性&quot;&gt;&lt;a href=&quot;#ES8-特性&quot; class=&quot;headerlink&quot; title=&quot;ES8 特性&quot;&gt;&lt;/a&gt;ES8 特性&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Object.values/Object.entries&lt;/li&gt;
&lt;li&gt;String padding(字符串填充)&lt;/li&gt;
&lt;li&gt;Object.getOwnPropertyDescriptors&lt;/li&gt;
&lt;li&gt;函数参数列表和调用中的尾逗号（Trailing commas）&lt;/li&gt;
&lt;li&gt;异步函数（Async Functions）</summary>
    
    
    
    
    <category term="es7" scheme="http://example.com/tags/es7/"/>
    
    <category term="es8" scheme="http://example.com/tags/es8/"/>
    
  </entry>
  
</feed>
