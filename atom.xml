<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晓然的自留地</title>
  
  <subtitle>路漫漫，上下而求索</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-10-31T15:00:16.522Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>织幻z</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu20安装SonarQube</title>
    <link href="http://example.com/2021/10/31/Ubuntu20%E5%AE%89%E8%A3%85SonarQube/"/>
    <id>http://example.com/2021/10/31/Ubuntu20%E5%AE%89%E8%A3%85SonarQube/</id>
    <published>2021-10-31T14:49:08.000Z</published>
    <updated>2021-10-31T15:00:16.522Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>SonarQube是一个基于web的开源工具。用来管理代码质量和代码分析。还可以跟踪统计数据并创建图表，使开发人员能够快速识别代码中的问题。</p></blockquote><h3 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h3><ol><li><p>Ubuntu 20.04 LTS，至少2GB内存和1核CPU</p></li><li><p>PostgreSQL 版本 9.3或更高</p></li><li><p>使用sudo权限访问ssh</p></li><li><p>开放端口9000</p><span id="more"></span></li><li><p>增加vm.max_map_count内核…执行下面四行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl -w vm.max_map_count=262144</span><br><span class="line"></span><br><span class="line">sudo sysctl -w fs.file-max=65536</span><br><span class="line"></span><br><span class="line">ulimit -n 65536</span><br><span class="line"></span><br><span class="line">ulimit -u 4096</span><br></pre></td></tr></table></figure></li><li><p>打开文件/etc/security/limits.conf并插入下面两行内容<br>sudo vim /etc/security/limits.conf<br>插入内容<br>sonarqube   -   nofile   65536<br>sonarqube   -   nproc    4096</p></li></ol><h3 id="在安装之前先更新系统，执行下面的命令"><a href="#在安装之前先更新系统，执行下面的命令" class="headerlink" title="在安装之前先更新系统，执行下面的命令"></a>在安装之前先更新系统，执行下面的命令</h3><p>sudo apt-get update<br>sudo apt-get upgrade<br>sudo apt-get install wget unzip -y</p><h3 id="安装jdk11-略（sdkman）"><a href="#安装jdk11-略（sdkman）" class="headerlink" title="安装jdk11 略（sdkman）"></a>安装jdk11 略（sdkman）</h3><h3 id="安装和配置PostgreSQL10数据库"><a href="#安装和配置PostgreSQL10数据库" class="headerlink" title="安装和配置PostgreSQL10数据库"></a>安装和配置PostgreSQL10数据库</h3><p>添加和下载PostgreSQL</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="string">&#x27;echo &quot;deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main&quot; &gt;&gt; /etc/apt/sources.list.d/pgdg.list&#x27;</span></span><br><span class="line"></span><br><span class="line">wget -q https://www.postgresql.org/media/keys/ACCC4CF8.asc -O - | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>安装数据库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install postgresql postgresql-contrib</span><br></pre></td></tr></table></figure><p>开启数据库服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start postgresql</span><br></pre></td></tr></table></figure><p>设置开机自启数据库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> postgresql</span><br></pre></td></tr></table></figure><p>修改PostgreSQL默认用户密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd postgres</span><br></pre></td></tr></table></figure><p>切换到postgres用户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - postgres</span><br></pre></td></tr></table></figure><p>创建一个新用户sonar</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createuser sonar</span><br></pre></td></tr></table></figure><p>进入PostgreSQL shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql</span><br></pre></td></tr></table></figure><p>为新建的用户sonar设置一个密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER sonar WITH ENCRYPTED password &#x27;sonar&#x27;;</span><br></pre></td></tr></table></figure><p>创建一个新的数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE sonarqube OWNER sonar;</span><br></pre></td></tr></table></figure><p>授予数据库sonarqube的所有权限给sonar用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on DATABASE sonarqube to sonar;</span><br></pre></td></tr></table></figure><p>退出psql shell<br>\q</p><p>回到sudo权限用户<br>exit</p><h3 id="在Ubuntu安装SonarQube"><a href="#在Ubuntu安装SonarQube" class="headerlink" title="在Ubuntu安装SonarQube"></a>在Ubuntu安装SonarQube</h3><p>下载sonaqube安装文件 <a href="https://www.sonarqube.org/downloads/">最新版地址</a></p><p>cd /tmp</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.1.0.zip</span><br></pre></td></tr></table></figure><p>将下载的文件解压到/opt目录<br>sudo unzip sonarqube-7.9.3.zip -d /opt<br>移动解压的文件到/opt/sonarqube<br>sudo mv /opt/sonarqube-7.9.3 /opt/sonarqube</p><p>配置SonarQube<br>创建组sonar<br>sudo groupadd sonar</p><p>添加用户访问权限<br>sudo useradd -c “user to run SonarQube” -d /opt/sonarqube -g sonar sonar</p><p>sudo chown sonar:sonar /opt/sonarqube -R</p><p>打开SonarQube配置文件</p><p>添加下面三行数据（数据库用户名和密码以及数据库连接地址）<br>sonar.jdbc.username=sonar</p><p>sonar.jdbc.password=sonar</p><p>sonar.jdbc.url=jdbc:postgresql://yourip:5432/sonarqube</p><p>编辑sonar脚本文件并设置RUN_AS_USER（第一行为编辑文件，第二行为文件设置内容），编辑完成后按CTRL+X来保存和关闭文件<br>sudo nano /opt/sonarqube/bin/linux-x86-64/sonar.sh</p><p>RUN_AS_USER=sonar</p><p>切换到sonar用户<br>sudo su sonar</p><p>进入到脚本目录<br>cd /opt/sonarqube/bin/linux-x86-64/</p><p>运行脚本来启动SonarQube<br>./sonar.sh start</p><h3 id="配置Systemd服务"><a href="#配置Systemd服务" class="headerlink" title="配置Systemd服务"></a>配置Systemd服务</h3><p>首先停止SonarQube<br>cd /opt/sonarqube/bin/linux-x86-64/</p><p>./sonar.sh stop</p><p>创建systemd服务文件，并添加如下内容<br>sudo nano /etc/systemd/system/sonar.service</p><p>内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line"></span><br><span class="line">Description=SonarQube service</span><br><span class="line"></span><br><span class="line">After=syslog.target network.target</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"></span><br><span class="line">Type=forking</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">ExecStart=/opt/sonarqube/bin/linux-x86-64/sonar.sh start</span><br><span class="line"></span><br><span class="line">ExecStop=/opt/sonarqube/bin/linux-x86-64/sonar.sh stop</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">User=sonar</span><br><span class="line"></span><br><span class="line">Group=sonar</span><br><span class="line"></span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">LimitNPROC=4096</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line"></span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>现在可以使用systemctl来管理服务了</p><ul><li>开启服务</li></ul><p>sudo systemctl start sonar</p><ul><li>开机启动服务</li></ul><p>sudo systemctl enable sonar</p><ul><li>查看运行状态</li></ul><p>sudo systemctl status sonar</p><p>访问SonarQube：打开浏览器，在地址栏输入 <a href="http://localhost:9000/">http://localhost:9000</a> 或将localhost换成ip地址，<br>默认用户名和密码都是admin</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;SonarQube是一个基于web的开源工具。用来管理代码质量和代码分析。还可以跟踪统计数据并创建图表，使开发人员能够快速识别代码中的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;先决条件&quot;&gt;&lt;a href=&quot;#先决条件&quot; class=&quot;headerlink&quot; title=&quot;先决条件&quot;&gt;&lt;/a&gt;先决条件&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ubuntu 20.04 LTS，至少2GB内存和1核CPU&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PostgreSQL 版本 9.3或更高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用sudo权限访问ssh&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开放端口9000&lt;/p&gt;</summary>
    
    
    
    
    <category term="ubuntu" scheme="http://example.com/tags/ubuntu/"/>
    
    <category term="sonarqube" scheme="http://example.com/tags/sonarqube/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu20.04部署k8s</title>
    <link href="http://example.com/2021/10/28/ubuntu20-04%E9%83%A8%E7%BD%B2k8s/"/>
    <id>http://example.com/2021/10/28/ubuntu20-04%E9%83%A8%E7%BD%B2k8s/</id>
    <published>2021-10-28T10:24:22.000Z</published>
    <updated>2021-10-29T03:01:00.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置步骤"><a href="#前置步骤" class="headerlink" title="前置步骤"></a>前置步骤</h2><h3 id="禁止swap分区"><a href="#禁止swap分区" class="headerlink" title="禁止swap分区"></a>禁止swap分区</h3><p>K8s的要求，在每个宿主机上执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo swapoff -a</span><br></pre></td></tr></table></figure><p>#修改/etc/fstab，注释掉swap那行，持久化生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/fstab</span><br></pre></td></tr></table></figure><p>重启。</p><h3 id="确保sysctl配置中net-bridge-bridge-nf-call-iptables的值设置为了1"><a href="#确保sysctl配置中net-bridge-bridge-nf-call-iptables的值设置为了1" class="headerlink" title="确保sysctl配置中net.bridge.bridge-nf-call-iptables的值设置为了1"></a>确保sysctl配置中net.bridge.bridge-nf-call-iptables的值设置为了1</h3><span id="more"></span><p>在Ubuntu 20.04 Server上，这个值就是1。如果你的系统上不一致，使用下面的命令来修改：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sudo sysctl --system</span><br></pre></td></tr></table></figure><h3 id="安装docker，具体过程略。"><a href="#安装docker，具体过程略。" class="headerlink" title="安装docker，具体过程略。"></a>安装docker，具体过程略。</h3><p>   修改docker Cgroup Driver为systemd</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">EOF | sudo tee /etc/docker/daemon.json</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;exec-opts&quot;:[&quot;native.cgroupdriver=systemd&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">sudo systemctl restart docker.service</span><br></pre></td></tr></table></figure><h3 id="节点上安装-kubectl-kubelet-kubeadm"><a href="#节点上安装-kubectl-kubelet-kubeadm" class="headerlink" title="节点上安装  kubectl kubelet kubeadm"></a>节点上安装  kubectl kubelet kubeadm</h3><p>添加阿里云k8s源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">sudo vim /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get -y install kubectl kubelet kubeadm</span><br><span class="line"></span><br><span class="line">sudo apt-mark hold kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><h3 id="初始化master"><a href="#初始化master" class="headerlink" title="初始化master"></a>初始化master</h3><p>注意，这里使用了阿里云的镜像，然后使用了flanel（法兰绒）网络</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kubeadm init --image-repository registry.aliyuncs.com/google_containers --apiserver-advertise-address=<span class="string">&quot;其他节点可连接的ip地址&quot;</span> --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure><p>上面的命令执行成功后，会输出一条设置命令和kubeadm join相关的命令，后面加入worker node的时候要使用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h3 id="安装pod网络插件（cni）-法兰绒网络"><a href="#安装pod网络插件（cni）-法兰绒网络" class="headerlink" title="安装pod网络插件（cni） 法兰绒网络"></a>安装pod网络插件（cni） 法兰绒网络</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><p>上面两步只在主节点执行。</p><h3 id="node节点加入"><a href="#node节点加入" class="headerlink" title="node节点加入"></a>node节点加入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join ip:6443 --token xxx \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:yyy</span><br></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol><li>Ubuntu20.04无法启动kubelet的问题 ：<a href="https://www.coder4.com/archives/7344">Ubuntu20.04无法启动kubelet的问题</a></li><li>kubeadm init 命令 端口被占用的问题：使用kubeadm reset 重置</li><li>设置网络后，节点一直是NotReady:<br>‒ <code>kubectl describe node &quot;nodename&quot;</code><br>‒ Container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized<br>‒ 出现这个错误提示信息已经很明显,网络插件没有准备好.我们可以执行命令docker images|grep flannel来查看flannel镜像是否已经成功拉取下来.经过排查,flannel镜像拉取的有点慢,稍等一会以后就ok了.</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前置步骤&quot;&gt;&lt;a href=&quot;#前置步骤&quot; class=&quot;headerlink&quot; title=&quot;前置步骤&quot;&gt;&lt;/a&gt;前置步骤&lt;/h2&gt;&lt;h3 id=&quot;禁止swap分区&quot;&gt;&lt;a href=&quot;#禁止swap分区&quot; class=&quot;headerlink&quot; title=&quot;禁止swap分区&quot;&gt;&lt;/a&gt;禁止swap分区&lt;/h3&gt;&lt;p&gt;K8s的要求，在每个宿主机上执行：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo swapoff -a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;#修改/etc/fstab，注释掉swap那行，持久化生效&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo vi /etc/fstab&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;重启。&lt;/p&gt;
&lt;h3 id=&quot;确保sysctl配置中net-bridge-bridge-nf-call-iptables的值设置为了1&quot;&gt;&lt;a href=&quot;#确保sysctl配置中net-bridge-bridge-nf-call-iptables的值设置为了1&quot; class=&quot;headerlink&quot; title=&quot;确保sysctl配置中net.bridge.bridge-nf-call-iptables的值设置为了1&quot;&gt;&lt;/a&gt;确保sysctl配置中net.bridge.bridge-nf-call-iptables的值设置为了1&lt;/h3&gt;</summary>
    
    
    
    
    <category term="k8s" scheme="http://example.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>docker 一些参数的区别</title>
    <link href="http://example.com/2021/10/25/docker-%E4%B8%80%E4%BA%9B%E5%8F%82%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2021/10/25/docker-%E4%B8%80%E4%BA%9B%E5%8F%82%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-10-25T10:03:07.000Z</published>
    <updated>2021-10-25T10:04:40.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h3 id="ADD-和-COPY-的区别"><a href="#ADD-和-COPY-的区别" class="headerlink" title="ADD 和 COPY 的区别"></a>ADD 和 COPY 的区别</h3><p>COPY和ADD命令，在复制普通文件的时候，并没有什么太大的不同，两个命令都可以把本地文件，复制到镜像里。（如果复制的路径不存在，则会自动创建）</p><p>ADD 构建镜像和COPY最直观的一点不同，是ADD命令可以直接解压gzip压缩文件，这当我们有很多文件要上传操作的时候，就会变的简单很多。但是表现不一致，可能也不会解压，所以<strong>官方建议使用copy</strong>。</p><h3 id="ENV-和-ARG-的区别"><a href="#ENV-和-ARG-的区别" class="headerlink" title="ENV 和 ARG 的区别"></a>ENV 和 ARG 的区别</h3><span id="more"></span><p>ARG 和ENV 是经常容易被混淆的两个Dockerfile语法，它们都可以用来设置一个“变量”。<br>总的来说ARG和ENV有两点不同，第一点是声明变量的作用域不同，第二点是ARG声明后，可以在构建时修改变量。</p><ol><li>ARG是构建环境 ， ENV可带到镜像中</li></ol><p>用交互模式进入到ipconfig-env镜像中，然后输入env可以看到当前镜像的信息。</p><ol start="2"><li>ARG可以在构建镜像时改变变量值</li></ol><p>在构建时，可以使用—build-arg 参数来更改变量的值，比如现在要把变量VERSION的值进行修改,就可以使用下面的命令。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image build -f Dockerfile.ARG -t ipinfo-arg-2.0.0 --build-arg VERSION=2.0.0 .</span><br></pre></td></tr></table></figure><p>这时候我们再使用交互模式，开启ipinfo-arg-2.0.0容器。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container run -it ipinfo-arg-2.0.0 </span><br></pre></td></tr></table></figure><p>然后再通过shell命令，ipinfo verison查看ipinfo的版本，可以看到版本已经变成了2.0.0了。</p><h3 id="CMD-和-ENTRYPOINT-的区别"><a href="#CMD-和-ENTRYPOINT-的区别" class="headerlink" title="CMD 和 ENTRYPOINT 的区别"></a>CMD 和 ENTRYPOINT 的区别</h3><p>ENTRYPOINT 命令很容易和 CMD命令混淆。ENTRYPOINT也可以设置容器启动时要执行的命令。</p><p>CMD设置的命令，可以在 docker container run 时传入其它命令，覆盖掉 CMD 的命令，但是ENTRYPOINT所设置的命令时一定会被执行的。<br>ENTRYPOINT 和 CMD 可以联合使用， ENTRYPOINT 设置执行的命令，CMD传递参数。<br><a href="http://jspang.com/detailed?id=75#toc375">镜像区别测试</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;docker&quot;&gt;&lt;a href=&quot;#docker&quot; class=&quot;headerlink&quot; title=&quot;docker&quot;&gt;&lt;/a&gt;docker&lt;/h1&gt;&lt;h3 id=&quot;ADD-和-COPY-的区别&quot;&gt;&lt;a href=&quot;#ADD-和-COPY-的区别&quot; class=&quot;headerlink&quot; title=&quot;ADD 和 COPY 的区别&quot;&gt;&lt;/a&gt;ADD 和 COPY 的区别&lt;/h3&gt;&lt;p&gt;COPY和ADD命令，在复制普通文件的时候，并没有什么太大的不同，两个命令都可以把本地文件，复制到镜像里。（如果复制的路径不存在，则会自动创建）&lt;/p&gt;
&lt;p&gt;ADD 构建镜像和COPY最直观的一点不同，是ADD命令可以直接解压gzip压缩文件，这当我们有很多文件要上传操作的时候，就会变的简单很多。但是表现不一致，可能也不会解压，所以&lt;strong&gt;官方建议使用copy&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;ENV-和-ARG-的区别&quot;&gt;&lt;a href=&quot;#ENV-和-ARG-的区别&quot; class=&quot;headerlink&quot; title=&quot;ENV 和 ARG 的区别&quot;&gt;&lt;/a&gt;ENV 和 ARG 的区别&lt;/h3&gt;</summary>
    
    
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>将具名参数传递给sh</title>
    <link href="http://example.com/2021/10/20/%E5%B0%86%E5%85%B7%E5%90%8D%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E7%BB%99sh/"/>
    <id>http://example.com/2021/10/20/%E5%B0%86%E5%85%B7%E5%90%8D%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E7%BB%99sh/</id>
    <published>2021-10-20T07:41:39.000Z</published>
    <updated>2021-10-20T07:43:04.933Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ARGUMENT <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">    KEY=$(<span class="built_in">echo</span> <span class="variable">$ARGUMENT</span> | cut -f1 -d=)</span><br><span class="line">    VALUE=$(<span class="built_in">echo</span> <span class="variable">$ARGUMENT</span> | cut -f2 -d=)   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$KEY</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">            STEPS)              STEPS=<span class="variable">$&#123;VALUE&#125;</span> ;;</span><br><span class="line">            REPOSITORY_NAME)    REPOSITORY_NAME=<span class="variable">$&#123;VALUE&#125;</span> ;;     </span><br><span class="line">            *)   </span><br><span class="line">    <span class="keyword">esac</span>    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;STEPS = <span class="variable">$STEPS</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;REPOSITORY_NAME = <span class="variable">$REPOSITORY_NAME</span>&quot;</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>用法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash my_scripts.sh  STEPS=<span class="string">&quot;ABC&quot;</span> REPOSITORY_NAME=<span class="string">&quot;stackexchange&quot;</span></span><br></pre></td></tr></table></figure><p>控制台结果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">STEPS = ABC</span><br><span class="line">REPOSITORY_NAME = stackexchange</span><br></pre></td></tr></table></figure><p>准备在脚本中使用<strong>STEPS</strong>和<strong>REPOSITORY_NAME</strong>。</p><p>参数的顺序无关紧要。</p>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ARGUMENT &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;&lt;span class=&quot;variable&quot;&gt;$@&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    KEY=$(&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$ARGUMENT&lt;/span&gt; | cut -f1 -d=)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    VALUE=$(&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$ARGUMENT&lt;/span&gt; | cut -f2 -d=)   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;&lt;span class=&quot;variable&quot;&gt;$KEY&lt;/span&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            STEPS)              STEPS=&lt;span class=&quot;variable&quot;&gt;$&amp;#123;VALUE&amp;#125;&lt;/span&gt; ;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            REPOSITORY_NAME)    REPOSITORY_NAME=&lt;span class=&quot;variable&quot;&gt;$&amp;#123;VALUE&amp;#125;&lt;/span&gt; ;;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            *)   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;esac&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;STEPS = &lt;span class=&quot;variable&quot;&gt;$STEPS&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;REPOSITORY_NAME = &lt;span class=&quot;variable&quot;&gt;$REPOSITORY_NAME&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="shell" scheme="http://example.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>web错误收集</title>
    <link href="http://example.com/2021/09/26/web%E9%94%99%E8%AF%AF%E6%94%B6%E9%9B%86/"/>
    <id>http://example.com/2021/09/26/web%E9%94%99%E8%AF%AF%E6%94%B6%E9%9B%86/</id>
    <published>2021-09-26T06:58:49.000Z</published>
    <updated>2021-09-26T08:30:58.834Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>现在前端web项目通过使用monorepo及jenkins,基本实现了组件/库的服用和ci/cd。但是项目的错误收集上报仍然没有集成，这里简单记录下web项目的错误采集。</p></blockquote><span id="more"></span><h3 id="window-onerror"><a href="#window-onerror" class="headerlink" title="window.onerror"></a>window.onerror</h3><p>window.onerror会全局的在JavaScript运行时错误、语法错误发生时触发。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onerror = <span class="function">(<span class="params">msg, url, lineNum, colNum, err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`错误发生的异常信息（字符串）:<span class="subst">$&#123;msg&#125;</span>`</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`错误发生的脚本URL（字符串）:<span class="subst">$&#123;url&#125;</span>`</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`错误发生的行号（数字）:<span class="subst">$&#123;lineNum&#125;</span>`</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`错误发生的列号（数字）:<span class="subst">$&#123;colNum&#125;</span>`</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`错误发生的Error对象（错误对象）:<span class="subst">$&#123;err&#125;</span>`</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>注意：这里我们可以拿到的是被throw出来，没有被catch过的错误，即同步错误。而不能拿到promise这样的错误，即异步错误。</p></blockquote><p>window.onerror 只能获取script错误，对静态资源如图片/css/script加载错误无能为力，就要使用下面的<code>window.addEventListener(&#39;error&#39;)</code></p><h3 id="window-addEventListener-‘error’"><a href="#window-addEventListener-‘error’" class="headerlink" title="window.addEventListener(‘error’)"></a>window.addEventListener(‘error’)</h3><p>对于资源的加载错误事件中，<code>canBubble: false</code>，所以理所应当的window.onerror是拿不到资源加载错误的，而addEventListener则可以拿到错误。但是在拿到错误以后需要简单的区分一下是资源加载错误还是其他错误，因为该方法也能够捕获语法错误等一系列其他错误。</p><p>方法也很简单，他们之间有一个很明显的区别，其他的普通错误会有一个<code>message</code>字段，资源加载错误没有这个字段，这样只要让这一段代码运行在所有资源之前，那就可以拿到这方面的错误了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">    cosnole.log(e.message)</span><br><span class="line">    <span class="keyword">const</span> &#123; type &#125; = e</span><br><span class="line">    <span class="keyword">const</span> targetEvent = e</span><br><span class="line">    <span class="keyword">const</span> &#123; message, error &#125; = targetEvent</span><br><span class="line">    <span class="keyword">const</span> immutableTarget = e.target || e.srcElement</span><br><span class="line">    <span class="keyword">if</span> (message) &#123;</span><br><span class="line">      <span class="comment">// 构造异常数据格式并上报</span></span><br><span class="line">      <span class="comment">// js 错误</span></span><br><span class="line">      uncaughtErrorHandler(targetEvent)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (immutableTarget) &#123;</span><br><span class="line">      <span class="comment">// 资源错误</span></span><br><span class="line">      resourceErrorHandler(targetEvent)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是这里拿到的是一个event事件，和前面不一样，拿到的并不是一个error对象。</p></blockquote><h3 id="unhandledrejection"><a href="#unhandledrejection" class="headerlink" title="unhandledrejection"></a>unhandledrejection</h3><p>在前文中提到<code>Promise</code>中的错误并不能被try…catch和window.onerror捕获。这时候我们就需要unhandledrejection来帮我们捕获这部分错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;unhandledrejection&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Promise.reject()中的内容，告诉你发生错误的原因:<span class="subst">$&#123;e.reason&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Promise对象 :<span class="subst">$&#123;e.promise&#125;</span>`</span>);</span><br><span class="line">  <span class="comment">// 构造异常数据格式并上报</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="console-error"><a href="#console-error" class="headerlink" title="console.error"></a>console.error</h3><p><code>console.error</code>常常被视为打印的日志，可预知的错误，已经被捕获的错误，已经被处理过的内容。所以往往会被忽视不去处理。<br>下面这样的代码总是很常见,做了很多事情，用一个大大的try…catch,将异常捕获然后打一个console.error完事，可能对于异常处理这样已经完事，捕获住了错误，没有让程序崩溃，但如果对于错误收集这也是不可缺少的一部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以稍稍改造一下console.error，让每一次触发console.error的时候我们可以做一些事情，例如对错误收集系统做一下上报什么的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.error = (<span class="function"><span class="params">func</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在这里就可以收集到console.error的错误,做一些事情</span></span><br><span class="line">    func.apply(<span class="built_in">console</span>, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="built_in">console</span>.error);</span><br></pre></td></tr></table></figure><h3 id="window-fetch-amp-XMLHttpRequest"><a href="#window-fetch-amp-XMLHttpRequest" class="headerlink" title="window.fetch &amp; XMLHttpRequest"></a>window.fetch &amp; XMLHttpRequest</h3><p>这里需要一个replace工具函数来复写原对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">replace</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  source: any,</span></span></span><br><span class="line"><span class="params"><span class="function">  name: string,</span></span></span><br><span class="line"><span class="params"><span class="function">  behavior: (...args: any[]) =&gt; any</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(name <span class="keyword">in</span> source)) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> original = source[name]</span><br><span class="line">  <span class="keyword">const</span> wrapped = behavior(original)</span><br><span class="line">  source[name] = wrapped</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> original</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>fetch</strong><br><code>请求状态码</code>，则可以通过覆写 window.fetch 和 XMLHttpRequest 对象来实现监听，覆写 fetch ，以下是简化后的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">fetchOriginal = replace(</span><br><span class="line">    <span class="built_in">global</span>,</span><br><span class="line">    <span class="string">&#x27;fetch&#x27;</span>,</span><br><span class="line">    <span class="function">(<span class="params">origin</span>) =&gt;</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params">...args: any[]</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> origin</span><br><span class="line">          .apply(<span class="built_in">this</span>, args)</span><br><span class="line">          .then(<span class="function">(<span class="params">res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> [url, conf] = args</span><br><span class="line">            <span class="keyword">const</span> detail: FetchErrorDetail = &#123;</span><br><span class="line">              <span class="attr">req</span>: &#123;</span><br><span class="line">                url,</span><br><span class="line">                <span class="attr">method</span>: conf &amp;&amp; conf.method,</span><br><span class="line">                <span class="attr">data</span>: (conf &amp;&amp; conf.body) || &#123;&#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">res</span>: &#123;</span><br><span class="line">                <span class="attr">status</span>: res.status,</span><br><span class="line">                <span class="attr">statusText</span>: res.statusText,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">            client.addAction(<span class="string">&#x27;fetch&#x27;</span>, detail, <span class="string">&#x27;fetch&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!res.status || res.status &gt;= <span class="number">400</span>) &#123;</span><br><span class="line">              networkDispatcher(FETCH_ERROR, detail)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(<span class="function">(<span class="params">err: <span class="built_in">Error</span></span>) =&gt;</span> &#123;</span><br><span class="line">            networkDispatcher(FETCH_ERROR, err)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>XMLHttpRequest</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> xhrOriginal = access</span><br><span class="line">  ? &#123;</span><br><span class="line">      <span class="attr">open</span>: XMLHttpRequest.prototype.open,</span><br><span class="line">      <span class="attr">send</span>: XMLHttpRequest.prototype.send,</span><br><span class="line">    &#125;</span><br><span class="line">  : &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> desc = &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> xhrProto = XMLHttpRequest?.prototype</span><br><span class="line"></span><br><span class="line">  xhrOriginal.open = replace(</span><br><span class="line">    xhrProto,</span><br><span class="line">    <span class="string">&#x27;open&#x27;</span>,</span><br><span class="line">    <span class="function">(<span class="params">origin</span>) =&gt;</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params">...args: any[]</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> [method, url] = args</span><br><span class="line">        desc.method = method</span><br><span class="line">        desc.url = url</span><br><span class="line">        <span class="keyword">return</span> origin.apply(<span class="built_in">this</span>, args)</span><br><span class="line">      &#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  xhrOriginal.send = replace(</span><br><span class="line">    xhrProto,</span><br><span class="line">    <span class="string">&#x27;send&#x27;</span>,</span><br><span class="line">    <span class="function">(<span class="params">origin</span>) =&gt;</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params">...args: any[]</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.addEventListener(<span class="string">&#x27;readystatechange&#x27;</span>, <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="comment">// 上报地址不监听</span></span><br><span class="line">            <span class="keyword">if</span> (desc.url !== client._config.endpoint) &#123;</span><br><span class="line">              <span class="keyword">const</span> detail: AjaxErrorDetail = &#123;</span><br><span class="line">                <span class="attr">req</span>: &#123;</span><br><span class="line">                  <span class="attr">url</span>: desc.url,</span><br><span class="line">                  <span class="attr">method</span>: desc.method,</span><br><span class="line">                  <span class="attr">data</span>: args[<span class="number">0</span>] || &#123;&#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">res</span>: &#123;</span><br><span class="line">                  <span class="attr">status</span>: <span class="built_in">this</span>.status,</span><br><span class="line">                  <span class="attr">statusText</span>: <span class="built_in">this</span>.statusText,</span><br><span class="line">                  <span class="attr">response</span>: <span class="built_in">this</span>.response,</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              client.addAction(<span class="string">&#x27;ajax&#x27;</span>, detail, <span class="string">&#x27;ajax&#x27;</span>)</span><br><span class="line">              <span class="keyword">if</span> (!<span class="built_in">this</span>.status || <span class="built_in">this</span>.status &gt;= <span class="number">400</span>) &#123;</span><br><span class="line">                <span class="comment">// 上报失败请求信息</span></span><br><span class="line">                networkDispatcher(AJAX_ERROR, detail)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> origin.apply(<span class="built_in">this</span>, args)</span><br><span class="line">      &#125;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><p><a href="https://v3.cn.vuejs.org/api/application-config.html#errorhandler">Vue.config.errorHandler</a></p><h3 id="react"><a href="#react" class="headerlink" title="react"></a>react</h3><p><a href="https://react.yubolun.com/docs/error-boundaries.html">Error Boundaries</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;现在前端web项目通过使用monorepo及jenkins,基本实现了组件/库的服用和ci/cd。但是项目的错误收集上报仍然没有集成，这里简单记录下web项目的错误采集。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="异常处理" scheme="http://example.com/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins&amp;Gitlab:jenkins构建成功后在gitlab打tag</title>
    <link href="http://example.com/2021/09/23/Jenkins-Gitlab-jenkins%E6%9E%84%E5%BB%BA%E6%88%90%E5%8A%9F%E5%90%8E%E5%9C%A8gitlab%E6%89%93tag/"/>
    <id>http://example.com/2021/09/23/Jenkins-Gitlab-jenkins%E6%9E%84%E5%BB%BA%E6%88%90%E5%8A%9F%E5%90%8E%E5%9C%A8gitlab%E6%89%93tag/</id>
    <published>2021-09-23T06:18:42.000Z</published>
    <updated>2021-09-23T08:32:21.003Z</updated>
    
    <content type="html"><![CDATA[<h3 id="插件？"><a href="#插件？" class="headerlink" title="插件？"></a>插件？</h3><p>首先想找找jenkins有没有合适的插件：</p><ul><li>git publisher长时间无人维护；</li><li>git push 并不适合目前的多分支流水线构建。<br>此路不通。<span id="more"></span><h2 id="api"><a href="#api" class="headerlink" title="api"></a>api</h2></li></ul><p>那只能走<a href="https://docs.gitlab.com/12.10/ee/api/tags.html">gitlab-doc</a>这条路了。</p><ol><li><p>创建gitlab token, setting-&gt;access tokens,创建个人token，确保有访问构建的项目权限。<br><img src="./gitlab-token.png" alt="token"></p></li><li><p>jenkins 安装 <code>http request</code>插件，创建<strong>全局凭据</strong>，类型切记选择<strong>secret text</strong>,不要选<del>gitlab api token</del>.<br><img src="./jenkins-cert.png" alt="凭据"></p></li><li><p>在share library <code>jenkins-library</code> 创建目录src/com/xzlcorp,创建文件gitlab.groovy.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">package</span> com.xzlcorp</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装HTTP请求</span></span><br><span class="line"><span class="keyword">def</span> HttpReq(reqType,reqUrl,reqBody)&#123;</span><br><span class="line">    <span class="keyword">def</span> gitServer = <span class="string">&quot;https://git.xzlcorp.com/api/v4&quot;</span></span><br><span class="line">    withCredentials([string(<span class="attr">credentialsId:</span> <span class="string">&#x27;gitlab-token&#x27;</span>, <span class="attr">variable:</span> <span class="string">&#x27;gitlabToken&#x27;</span>)]) &#123;</span><br><span class="line">      result = httpRequest <span class="attr">customHeaders:</span> [[<span class="attr">maskValue:</span> <span class="literal">true</span>, <span class="attr">name:</span> <span class="string">&#x27;PRIVATE-TOKEN&#x27;</span>, <span class="attr">value:</span> <span class="string">&quot;$&#123;gitlabToken&#125;&quot;</span>]], </span><br><span class="line">                <span class="symbol">httpMode:</span> reqType, </span><br><span class="line">                <span class="symbol">contentType:</span> <span class="string">&quot;APPLICATION_JSON&quot;</span>,</span><br><span class="line">                <span class="symbol">consoleLogResponseBody:</span> <span class="literal">true</span>,</span><br><span class="line">                <span class="symbol">ignoreSslErrors:</span> <span class="literal">true</span>, </span><br><span class="line">                <span class="symbol">requestBody:</span> reqBody,</span><br><span class="line">                <span class="symbol">url:</span> <span class="string">&quot;$&#123;gitServer&#125;/$&#123;reqUrl&#125;&quot;</span></span><br><span class="line">                <span class="comment">//quiet: true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建tag</span></span><br><span class="line"><span class="keyword">def</span> CreateTag(projectId, tag, branchName)&#123;</span><br><span class="line">    <span class="keyword">def</span> apiUrl = <span class="string">&quot;projects/$&#123;projectId&#125;/repository/tags&quot;</span></span><br><span class="line">    reqBody = <span class="string">&quot;&quot;&quot;&#123;&quot;tag_name&quot;: &quot;$&#123;tag&#125;&quot;,&quot;ref&quot;:&quot;$&#123;branchName&#125;&quot;, &quot;message&quot;: &quot;$&#123;branchName&#125;&quot;&#125;&quot;&quot;&quot;</span></span><br><span class="line">    response = HttpReq(<span class="string">&#x27;POST&#x27;</span>,apiUrl,reqBody)</span><br><span class="line">    println(response)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li>在项目的jenkinsfile中加入代码：<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Library</span>(<span class="string">&#x27;jenkins-libs-web@master&#x27;</span>) _</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> gitlab = <span class="keyword">new</span> com.xzlcorp.gitlab()</span><br><span class="line"><span class="keyword">def</span> tool = <span class="keyword">new</span> com.xzlcorp.tools()</span><br><span class="line"></span><br><span class="line">String projectName = <span class="string">&quot;project-name&quot;</span></span><br><span class="line"></span><br><span class="line">pipiline &#123;</span><br><span class="line">  ...</span><br><span class="line">  post &#123;</span><br><span class="line">    always &#123;</span><br><span class="line">      <span class="comment">// echo &quot;构建结束&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    success &#123;</span><br><span class="line">      <span class="comment">// echo &quot;构建成功&quot;</span></span><br><span class="line">      script &#123;</span><br><span class="line">        <span class="keyword">if</span> (env.BRANCH == <span class="string">&quot;master&quot;</span>) &#123;</span><br><span class="line">          projectId = gitlab.GetProjectID(projectName)</span><br><span class="line">          tool.PrintMsg(<span class="string">&quot;打tag start&quot;</span>,<span class="string">&quot;blue&quot;</span>)</span><br><span class="line">          String tagString = <span class="string">&quot;v$&#123;new Date().format(&quot;</span>yy.MMdd.HHmm<span class="string">&quot;)&#125;&quot;</span></span><br><span class="line">          gitlab.CreateTag(projectId, tagString, env.BRANCH_NAME)</span><br><span class="line">          tool.PrintMsg(<span class="string">&quot;打tag end&quot;</span>,<span class="string">&quot;blue&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    failure &#123;</span><br><span class="line">      echo <span class="string">&quot;构建失败&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    aborted &#123;</span><br><span class="line">      echo <span class="string">&quot;构建中断&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;插件？&quot;&gt;&lt;a href=&quot;#插件？&quot; class=&quot;headerlink&quot; title=&quot;插件？&quot;&gt;&lt;/a&gt;插件？&lt;/h3&gt;&lt;p&gt;首先想找找jenkins有没有合适的插件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git publisher长时间无人维护；&lt;/li&gt;
&lt;li&gt;git push 并不适合目前的多分支流水线构建。&lt;br&gt;此路不通。</summary>
    
    
    
    
    <category term="jenkins" scheme="http://example.com/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins&amp;Gitlab:Webhook触发多分支项目构建</title>
    <link href="http://example.com/2021/09/22/Jenkins-Gitlab-Webhook%E8%A7%A6%E5%8F%91%E5%A4%9A%E5%88%86%E6%94%AF%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/"/>
    <id>http://example.com/2021/09/22/Jenkins-Gitlab-Webhook%E8%A7%A6%E5%8F%91%E5%A4%9A%E5%88%86%E6%94%AF%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/</id>
    <published>2021-09-22T09:38:07.000Z</published>
    <updated>2021-09-22T09:49:40.766Z</updated>
    
    <content type="html"><![CDATA[<h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><p>在Jenkinsfile中，添加配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">triggers &#123;</span><br><span class="line">    GenericTrigger (</span><br><span class="line">        // 构建时的标题</span><br><span class="line">        causeString: &#x27;Triggered by $ref&#x27;,</span><br><span class="line">        // 获取POST参数中的变量，key指的是变量名，通过$ref来访问对应的值，value指的是JSON匹配值（参考Jmeter的JSON提取器）</span><br><span class="line">        // ref指的是推送的分支，格式如：refs/heads/master</span><br><span class="line">        genericVariables: [[key: &#x27;ref&#x27;, value: &#x27;$.ref&#x27;]],</span><br><span class="line">        // 打印获取的变量的key-value，此处会打印如：ref=refs/heads/master</span><br><span class="line">        printContributedVariables: true,</span><br><span class="line">        // 打印POST传递的参数</span><br><span class="line">        printPostContent: true,</span><br><span class="line">        // regexpFilterExpression与regexpFilterExpression成对使用</span><br><span class="line">        // 当两者相等时，会触发对应分支的构建</span><br><span class="line">        regexpFilterExpression: &#x27;^refs/heads/(master|production)$&#x27;,</span><br><span class="line">        regexpFilterText: &#x27;$ref&#x27;,</span><br><span class="line">        // 与webhook中配置的token参数值一致</span><br><span class="line">        token: &#x27;mytoken&#x27;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><p>安装插件：Multibranch Scan Webhook Trigger</p><p>在多分支项目配置中的Scan Multibranch Pipeline Triggers选择并添加：</p><span id="more"></span><p><img src="./jenkins_setting.png" alt="jenkins"></p><h3 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h3><p>在gitlab相应项目的配置-&gt;集成，webhook，在Url中填入：<br><img src="./gitlab_webhooks.png" alt="gitlab"></p><p>结束。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;项目&quot;&gt;&lt;a href=&quot;#项目&quot; class=&quot;headerlink&quot; title=&quot;项目&quot;&gt;&lt;/a&gt;项目&lt;/h3&gt;&lt;p&gt;在Jenkinsfile中，添加配置：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;triggers &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    GenericTrigger (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 构建时的标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        causeString: &amp;#x27;Triggered by $ref&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 获取POST参数中的变量，key指的是变量名，通过$ref来访问对应的值，value指的是JSON匹配值（参考Jmeter的JSON提取器）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // ref指的是推送的分支，格式如：refs/heads/master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        genericVariables: [[key: &amp;#x27;ref&amp;#x27;, value: &amp;#x27;$.ref&amp;#x27;]],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 打印获取的变量的key-value，此处会打印如：ref=refs/heads/master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        printContributedVariables: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 打印POST传递的参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        printPostContent: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // regexpFilterExpression与regexpFilterExpression成对使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 当两者相等时，会触发对应分支的构建&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        regexpFilterExpression: &amp;#x27;^refs/heads/(master|production)$&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        regexpFilterText: &amp;#x27;$ref&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 与webhook中配置的token参数值一致&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        token: &amp;#x27;mytoken&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Jenkins&quot;&gt;&lt;a href=&quot;#Jenkins&quot; class=&quot;headerlink&quot; title=&quot;Jenkins&quot;&gt;&lt;/a&gt;Jenkins&lt;/h3&gt;&lt;p&gt;安装插件：Multibranch Scan Webhook Trigger&lt;/p&gt;
&lt;p&gt;在多分支项目配置中的Scan Multibranch Pipeline Triggers选择并添加：&lt;/p&gt;</summary>
    
    
    
    
    <category term="jenkins" scheme="http://example.com/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>使用 pnpm 构建 Monorepo 项目</title>
    <link href="http://example.com/2021/08/31/%E4%BD%BF%E7%94%A8-pnpm-%E6%9E%84%E5%BB%BA-Monorepo-%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2021/08/31/%E4%BD%BF%E7%94%A8-pnpm-%E6%9E%84%E5%BB%BA-Monorepo-%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-08-31T02:48:58.000Z</published>
    <updated>2021-08-31T03:09:10.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="monorepo-是什么"><a href="#monorepo-是什么" class="headerlink" title="monorepo 是什么"></a>monorepo 是什么</h2><p>monorepo 是把多个项目的所有代码放到一个 git 仓库中进行管理，多个项目中会有共享的代码则可以分包引用。整个项目就是有 root 管理的 dependencies 加上多个 packages，每个 package 也可以在自己的作用域引入自己的 dependencies。</p><span id="more"></span><p>项目结构如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── packages</span><br><span class="line">│   ├── ui</span><br><span class="line">│   ├── utils</span><br><span class="line">│   └── web</span><br><span class="line">├── pnpm-lock.yaml</span><br><span class="line">├── pnpm-workspace.yaml</span><br><span class="line">├── readme.md</span><br><span class="line">└── tsconfig.json</span><br></pre></td></tr></table></figure><p>packages 文件夹中的就是原本每个独立的项目(下文称之为 package )了，现在放在一起用 workspace 去管理。最外层路径称之为 root。在 root package.json 中的 deps 是所有子 package 共用的。</p><h2 id="pnpm-是什么"><a href="#pnpm-是什么" class="headerlink" title="pnpm 是什么"></a>pnpm 是什么</h2><blockquote><p>Fast, disk space efficient package manager</p></blockquote><p>pnpm 是新一代 node 包管理器。它由 npm/yarn 衍生而来，但却解决了 npm/yarn 内部潜在的 bug，并且极大了地优化了性能，扩展了使用场景。[^1]</p><p>pnpm 相比 yarn，npm，yarn PnP 安装包更快速，对包的依赖管理更偏平，对磁盘占用也有优势, 类似maven中央仓库，统一依赖目录。</p><p>具体可以参考这篇文章：<a href="https://jishuin.proginn.com/p/763bfbd3bcff">为什么现在我更推荐 pnpm 而不是 npm/yarn?</a></p><h2 id="为什么要使用-monorepo"><a href="#为什么要使用-monorepo" class="headerlink" title="为什么要使用 monorepo"></a>为什么要使用 monorepo</h2><p>使用 monorepo 可以把原本一个项目的多个模块拆分成多个 packages，在 packages 之间相互引用，也可以单独发布成包，极大地解决了项目之间代码无法重用的痛点。在项目打包或者编译操作时也可重用一套配置，通吃所有 packages。</p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>首先需要<a href="https://pnpm.io/zh/installation">安装pnpm</a>, 然后npm初始化一个项目。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.pnpm.io/install.sh | sh -</span><br><span class="line"></span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>在 root 目录新建 pnpm-workspace.yaml，内容如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">packages:</span></span><br><span class="line">  <span class="comment"># all packages in subdirs of packages/ and components/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;packages/**&#x27;</span></span><br></pre></td></tr></table></figure><p>我们所有的 packages 都放在 packages 目录下。</p><p>用 pnpm 安装全局共用的包，比如 react, react-dom。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install react react-dom -w</span><br></pre></td></tr></table></figure><p>注意这里使用 <strong>-w</strong> 表示把包安装在 root 下，该包会放置在 <root>/node_modules 下。当然也可以把把安装在所有 packages 中，使用 <strong>-r</strong> 代替 <strong>-w</strong>。你必须使用其中一个参数。例如把 dayjs 装入 packages/web 下，packages/web 中的 package.json name 为 @test/web。需要执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm i dayjs -r --filter @<span class="built_in">test</span>/web</span><br></pre></td></tr></table></figure><p>使用 –filter 后面接子 package 的 name 表示只把安装的新包装入这个 package 中。</p><p>接下来，我们在 packages 中新建以下几个目录。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── packages</span><br><span class="line">│   ├── ui</span><br><span class="line">│   ├── utils</span><br><span class="line">│   └── web</span><br></pre></td></tr></table></figure><p>然后每个都执行 npm init ，假设每个 package 的 name 依次为 @test/ui @test/utils @test/web。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// packages/utils</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;@test/utils&quot;</span>, // &lt;-----</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.ts&quot;</span>,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;Innei&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以 utils 为例，入口文件为 index.ts，首先建立这个文件。写入如下内容。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> const add = (a: number, b: number) =&gt; a + b</span><br></pre></td></tr></table></figure><p>然后，执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm i @<span class="built_in">test</span>/utils -r --filter @<span class="built_in">test</span>/ui</span><br></pre></td></tr></table></figure><p>之后，打开 packages/ui/package.json 发现 dependencies 中多了一行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;@test/ui&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;./index.tsx&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;Innei&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@test/utils&quot;</span>: <span class="string">&quot;workspace:^1.0.0&quot;</span> // &lt;--------</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于是 workspace 管理的，所有有一个前缀 workspace。接下来则可以从 package/ui 中直接引入这个包了。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;add&#125; <span class="keyword">from</span> <span class="string">&#x27;@test/utils&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>那么接下来的 package/web 就是整个项目的整体了。放置原来项目中的所有 src 下的代码。而一些原本通用的代码就从 src 下提取成包放在了 packages 下了。这样就好理解了。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;monorepo-是什么&quot;&gt;&lt;a href=&quot;#monorepo-是什么&quot; class=&quot;headerlink&quot; title=&quot;monorepo 是什么&quot;&gt;&lt;/a&gt;monorepo 是什么&lt;/h2&gt;&lt;p&gt;monorepo 是把多个项目的所有代码放到一个 git 仓库中进行管理，多个项目中会有共享的代码则可以分包引用。整个项目就是有 root 管理的 dependencies 加上多个 packages，每个 package 也可以在自己的作用域引入自己的 dependencies。&lt;/p&gt;</summary>
    
    
    
    
    <category term="pnpm" scheme="http://example.com/tags/pnpm/"/>
    
  </entry>
  
  <entry>
    <title>使用brew安装jenkins并配置局域网IP访问</title>
    <link href="http://example.com/2021/08/14/%E4%BD%BF%E7%94%A8brew%E5%AE%89%E8%A3%85jenkins%E5%B9%B6%E9%85%8D%E7%BD%AE%E5%B1%80%E5%9F%9F%E7%BD%91IP%E8%AE%BF%E9%97%AE/"/>
    <id>http://example.com/2021/08/14/%E4%BD%BF%E7%94%A8brew%E5%AE%89%E8%A3%85jenkins%E5%B9%B6%E9%85%8D%E7%BD%AE%E5%B1%80%E5%9F%9F%E7%BD%91IP%E8%AE%BF%E9%97%AE/</id>
    <published>2021-08-14T01:33:39.000Z</published>
    <updated>2021-08-14T01:39:07.990Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用brew安装jenkins<br>brew install jenkins-lts</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>启动，停止，重启jenkins</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew services start jenkins-lts</span><br><span class="line">brew services stop jenkins-lts</span><br><span class="line">brew services restart jenkins-lts</span><br></pre></td></tr></table></figure><h3 id="局域网使用IP访问jenkins"><a href="#局域网使用IP访问jenkins" class="headerlink" title="局域网使用IP访问jenkins"></a>局域网使用IP访问jenkins</h3><p>使用brew安装jenkins会避免很多其他安装方式产生的用户权限问题，但是会将httpListenAddress默认设置为127.0.0.1，这样我们虽然可以在本地用localhost:8080访问，但是本机和局域网均无法用ip访问。解决办法为修改两个路径下的plist配置。<br>～/Library/LaunchAgents/homebrew.mxcl.jenkins.plist<br>/usr/local/opt/jenkins/homebrew.mxcl.jenkins.plist<br>将上面两个plist中的httpListenAddress后的ip地址，修改为本机IP或者0.0.0.0即可。</p><p>上述两个配置文件修改完后，重启Jenkins服务；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;使用brew安装jenkins&lt;br&gt;brew install jenkins-lts&lt;/p&gt;
&lt;h3 id=&quot;常用命令&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
    <category term="jenkins" scheme="http://example.com/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>jenkins配置全局工具NodeJs及Jdk,Maven</title>
    <link href="http://example.com/2021/08/10/jenkins%E9%85%8D%E7%BD%AE%E5%85%A8%E5%B1%80%E5%B7%A5%E5%85%B7NodeJs%E5%8F%8AJdk/"/>
    <id>http://example.com/2021/08/10/jenkins%E9%85%8D%E7%BD%AE%E5%85%A8%E5%B1%80%E5%B7%A5%E5%85%B7NodeJs%E5%8F%8AJdk/</id>
    <published>2021-08-10T14:42:56.000Z</published>
    <updated>2021-08-14T01:30:53.525Z</updated>
    
    <content type="html"><![CDATA[<h3 id="添加nodejs插件"><a href="#添加nodejs插件" class="headerlink" title="添加nodejs插件"></a>添加nodejs插件</h3><p>点击 <strong>系统管理</strong> &gt; <strong>插件管理</strong> &gt; <strong>可选插件</strong> 搜索NodeJs并安装</p><h3 id="添加全局工具"><a href="#添加全局工具" class="headerlink" title="添加全局工具"></a>添加全局工具</h3><p>点击 <strong>系统管理</strong> &gt; <strong>全局工具配置</strong>,此时应该就会出现node配置</p><span id="more"></span><p><img src="https://pic.imgdb.cn/item/611292f25132923bf802f35d.png" alt="全局工具配置"></p><p>需要注意的是，安装时需在本机先配置好node及jdk环境，因为我们使用的是本地环境，如下图</p><p><img src="https://z3.ax1x.com/2021/08/10/ft2smQ.png" alt="jdk"><br><img src="https://z3.ax1x.com/2021/08/10/ftWYGt.png" alt="maven"><br><img src="https://z3.ax1x.com/2021/08/10/ft25XF.png" alt="nodejs"></p><h3 id="pipiline验证"><a href="#pipiline验证" class="headerlink" title="pipiline验证"></a>pipiline验证</h3><p>配置流水线代码，输出各工具版本号</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123; node &#123; label <span class="string">&quot;build&quot;</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line">    environment &#123;</span><br><span class="line">        CC = <span class="string">&quot;clang&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    tools &#123;</span><br><span class="line">        nodejs <span class="string">&quot;NodeJs_14&quot;</span></span><br><span class="line">        jdk <span class="string">&quot;Jdk_8&quot;</span></span><br><span class="line">        maven <span class="string">&quot;Maven&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    options &#123;</span><br><span class="line">        timeout (<span class="attr">time:</span> <span class="number">1</span>, <span class="attr">unit:</span> <span class="string">&quot;HOURS&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;Hello&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&quot;Hello World $&#123;CC&#125;&quot;</span></span><br><span class="line">                sh <span class="string">&quot;node -v&quot;</span></span><br><span class="line">                sh <span class="string">&quot;java -version&quot;</span></span><br><span class="line">                sh <span class="string">&quot;mvn -version&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    post &#123;</span><br><span class="line">        always &#123;</span><br><span class="line">            echo <span class="string">&quot;Hello World always $&#123;CC&#125;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        success &#123;</span><br><span class="line">            echo <span class="string">&#x27;Hello World success&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        failure &#123;</span><br><span class="line">            echo <span class="string">&#x27;Hello World failure&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        aborted &#123;</span><br><span class="line">            echo <span class="string">&#x27;Hello World abroted&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完成后保存，并点击构建，console如下：<br><img src="https://z3.ax1x.com/2021/08/10/ftWfLF.png" alt="console"></p><p>配置成功。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;添加nodejs插件&quot;&gt;&lt;a href=&quot;#添加nodejs插件&quot; class=&quot;headerlink&quot; title=&quot;添加nodejs插件&quot;&gt;&lt;/a&gt;添加nodejs插件&lt;/h3&gt;&lt;p&gt;点击 &lt;strong&gt;系统管理&lt;/strong&gt; &amp;gt; &lt;strong&gt;插件管理&lt;/strong&gt; &amp;gt; &lt;strong&gt;可选插件&lt;/strong&gt; 搜索NodeJs并安装&lt;/p&gt;
&lt;h3 id=&quot;添加全局工具&quot;&gt;&lt;a href=&quot;#添加全局工具&quot; class=&quot;headerlink&quot; title=&quot;添加全局工具&quot;&gt;&lt;/a&gt;添加全局工具&lt;/h3&gt;&lt;p&gt;点击 &lt;strong&gt;系统管理&lt;/strong&gt; &amp;gt; &lt;strong&gt;全局工具配置&lt;/strong&gt;,此时应该就会出现node配置&lt;/p&gt;</summary>
    
    
    
    
    <category term="jenkins" scheme="http://example.com/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>单点kafka的安装配置</title>
    <link href="http://example.com/2021/08/10/%E5%8D%95%E7%82%B9kafka%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2021/08/10/%E5%8D%95%E7%82%B9kafka%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</id>
    <published>2021-08-10T06:28:06.000Z</published>
    <updated>2021-08-14T01:30:53.544Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载及安装"><a href="#下载及安装" class="headerlink" title="下载及安装"></a>下载及安装</h3><blockquote><p>kafka依赖zookeeper，所以也需下载zookeeper。</p></blockquote><p>  去<a href="http://zookeeper.apache.org/">zookeeper</a>下载相应的版本并配置Path，略过。</p><p>  去<a href="http://archive.apache.org/dist/kafka/">kafka官网</a>下载相应的版本并配置Path，略过。</p><h3 id="配置zookeeper"><a href="#配置zookeeper" class="headerlink" title="配置zookeeper"></a>配置zookeeper</h3><ol><li>将zoo_sample.cfg复制一份，重命名为zoo.cfg.</li><li>配置 dataDir=/Users/wuxiaoran/env/bin/apache-zookeeper-3.6.3-bin/data</li></ol><h3 id="配置kafka"><a href="#配置kafka" class="headerlink" title="配置kafka"></a>配置kafka</h3><ol><li>打开server.properties</li><li>broker.id=0<br> port=9092<br> host.name=localhost<br> advertised.host.name=localhost<br> log.dirs=/Users/wuxiaoran/logs/kafka_2.12<span id="more"></span><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2></li><li>启动zookeeper <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh start</span><br></pre></td></tr></table></figure></li><li>启动kafka <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-server-start.sh  -daemon /Users/wuxiaoran/env/bin/kafka_2.13-2.8.0/config/server.properties</span><br></pre></td></tr></table></figure></li></ol><h3 id="kafka常用命令"><a href="#kafka常用命令" class="headerlink" title="kafka常用命令"></a>kafka常用命令</h3><ol><li>创建topic， 分区为1，副本为1</li></ol><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure></code></pre><ol start="2"><li>查看topic</li></ol><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --bootstrap-server localhost:9092 --list</span><br></pre></td></tr></table></figure></code></pre><ol start="3"><li>删除topic</li></ol><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --zookeeper localhost:2181 --delete --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure></code></pre><ol start="4"><li>查看指定topic详细信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --zookeeper localhost:2181 --describe --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li>查看所有topic详细信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --zookeeper localhost:2181 --describe</span><br></pre></td></tr></table></figure></li><li>查看指定分组的详细信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group group02</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;下载及安装&quot;&gt;&lt;a href=&quot;#下载及安装&quot; class=&quot;headerlink&quot; title=&quot;下载及安装&quot;&gt;&lt;/a&gt;下载及安装&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;kafka依赖zookeeper，所以也需下载zookeeper。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  去&lt;a href=&quot;http://zookeeper.apache.org/&quot;&gt;zookeeper&lt;/a&gt;下载相应的版本并配置Path，略过。&lt;/p&gt;
&lt;p&gt;  去&lt;a href=&quot;http://archive.apache.org/dist/kafka/&quot;&gt;kafka官网&lt;/a&gt;下载相应的版本并配置Path，略过。&lt;/p&gt;
&lt;h3 id=&quot;配置zookeeper&quot;&gt;&lt;a href=&quot;#配置zookeeper&quot; class=&quot;headerlink&quot; title=&quot;配置zookeeper&quot;&gt;&lt;/a&gt;配置zookeeper&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;将zoo_sample.cfg复制一份，重命名为zoo.cfg.&lt;/li&gt;
&lt;li&gt;配置 dataDir=/Users/wuxiaoran/env/bin/apache-zookeeper-3.6.3-bin/data&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;配置kafka&quot;&gt;&lt;a href=&quot;#配置kafka&quot; class=&quot;headerlink&quot; title=&quot;配置kafka&quot;&gt;&lt;/a&gt;配置kafka&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;打开server.properties&lt;/li&gt;
&lt;li&gt;broker.id=0&lt;br&gt; port=9092&lt;br&gt; host.name=localhost&lt;br&gt; advertised.host.name=localhost&lt;br&gt; log.dirs=/Users/wuxiaoran/logs/kafka_2.12</summary>
    
    
    
    
    <category term="kafka" scheme="http://example.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Feign 报错：Request method &#39;POST&#39; not supported</title>
    <link href="http://example.com/2021/08/05/Feign-%E6%8A%A5%E9%94%99%EF%BC%9ARequest-method-POST-not-supported/"/>
    <id>http://example.com/2021/08/05/Feign-%E6%8A%A5%E9%94%99%EF%BC%9ARequest-method-POST-not-supported/</id>
    <published>2021-08-05T02:15:16.000Z</published>
    <updated>2021-08-14T01:30:53.521Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果Fegin代理的是get请求，那么<strong>请求参数必须带上@RequestParam 或@RequestBody</strong></p></blockquote><p>错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;dashboard&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DashboardClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping(&quot;projects/getApiKeyByProjectId&quot;)</span></span><br><span class="line">  <span class="function">String <span class="title">getApiKeyByProjectId</span><span class="params">(Integer projectId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;dashboard&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DashboardClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping(&quot;projects/getApiKeyByProjectId&quot;)</span></span><br><span class="line">  <span class="function">String <span class="title">getApiKeyByProjectId</span><span class="params">(<span class="meta">@RequestParam</span> Integer projectId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;如果Fegin代理的是get请求，那么&lt;strong&gt;请求参数必须带上@RequestParam 或@RequestBody&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;错误：&lt;/p&gt;
&lt;figure class=&quot;highligh</summary>
      
    
    
    
    
    <category term="spring-cloud" scheme="http://example.com/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>搭建elasticsearch集群报错：with the same id but is a different node instance</title>
    <link href="http://example.com/2021/07/26/%E6%90%AD%E5%BB%BAelasticsearch%E9%9B%86%E7%BE%A4%E6%8A%A5%E9%94%99%EF%BC%9Awith%20the%20same%20id%20but%20is%20a%20different%20node%20instance/"/>
    <id>http://example.com/2021/07/26/%E6%90%AD%E5%BB%BAelasticsearch%E9%9B%86%E7%BE%A4%E6%8A%A5%E9%94%99%EF%BC%9Awith%20the%20same%20id%20but%20is%20a%20different%20node%20instance/</id>
    <published>2021-07-26T03:53:02.000Z</published>
    <updated>2021-08-14T01:30:53.546Z</updated>
    
    <content type="html"><![CDATA[<h3 id="记录一下在安装-elastic-search-单机多节点是时候报错解决方案"><a href="#记录一下在安装-elastic-search-单机多节点是时候报错解决方案" class="headerlink" title="记录一下在安装 elastic-search 单机多节点是时候报错解决方案"></a>记录一下在安装 elastic-search 单机多节点是时候报错解决方案</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[2021-07-26T11:43:03,929][INFO ][o.e.d.z.ZenDiscovery     ] </span><br><span class="line">[node-2] failed to send join request to master [&#123;node-1&#125;&#123;alKTwZlPRiWECIurrQVWXA&#125;&#123;qwbTz729TNajY6baHiruZA&#125;&#123;172.16.10.25&#125;&#123;172.16.10.25:9300&#125;</span><br><span class="line">&#123;ml.machine_memory=17179869184, ml.max_open_jobs=20, xpack.installed=<span class="literal">true</span>, ml.enabled=<span class="literal">true</span>&#125;],</span><br><span class="line">reason [RemoteTransportException[[node-1][172.16.10.25:9300][internal:discovery/zen/join]];</span><br><span class="line">nested: IllegalArgumentException</span><br><span class="line">[can<span class="string">&#x27;t add node &#123;node-2&#125;&#123;alKTwZlPRiWECIurrQVWXA&#125;&#123;8BoLzIHvRsuZLkYCbGd3jA&#125;&#123;172.16.10.25&#125;&#123;172.16.10.25:9301&#125;&#123;ml.machine_memory=17179869184, ml.max_open_jobs=20, xpack.installed=true, ml.enabled=true&#125;,</span></span><br><span class="line"><span class="string">found existing node &#123;node-1&#125;&#123;alKTwZlPRiWECIurrQVWXA&#125;&#123;qwbTz729TNajY6baHiruZA&#125;&#123;172.16.10.25&#125;&#123;172.16.10.25:9300&#125;&#123;ml.machine_memory=17179869184,</span></span><br><span class="line"><span class="string">xpack.installed=true, ml.max_open_jobs=20, ml.enabled=true&#125;</span></span><br><span class="line"><span class="string">with the same id but is a different node instance]; ]</span></span><br></pre></td></tr></table></figure><p>报错信息提示有相同的 id 但是是不同的实例。</p><p><strong>原因</strong>是： 我把作为 master 的 elastic-search 文件复制了两份，导致数据也包含在了 作为 slave节点里面。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>删除复制的作为 slave 节点的 elastic-search 的data 文件夹即可。</p><span id="more"></span><h4 id="node1"><a href="#node1" class="headerlink" title="node1"></a>node1</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cluster.name:</span> <span class="string">es-cluster</span></span><br><span class="line"></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">discovery.zen.ping.unicast.hosts:</span> [<span class="string">&quot;172.16.10.25:9300&quot;</span>,<span class="string">&quot;172.16.10.25:9301&quot;</span>, <span class="string">&quot;172.16.10.25:9302&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">discovery.zen.minimum_master_nodes:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="node2"><a href="#node2" class="headerlink" title="node2"></a>node2</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">es-cluster</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9201</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9301</span></span><br><span class="line"></span><br><span class="line"><span class="attr">discovery.zen.ping.unicast.hosts:</span> [<span class="string">&quot;172.16.10.25:9300&quot;</span>,<span class="string">&quot;172.16.10.25:9301&quot;</span>, <span class="string">&quot;172.16.10.25:9302&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">discovery.zen.minimum_master_nodes:</span> <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="node3"><a href="#node3" class="headerlink" title="node3"></a>node3</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">es-cluster</span></span><br><span class="line"></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-3</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9202</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9302</span></span><br><span class="line"></span><br><span class="line"><span class="attr">discovery.zen.ping.unicast.hosts:</span> [<span class="string">&quot;172.16.10.25:9300&quot;</span>,<span class="string">&quot;172.16.10.25:9301&quot;</span>, <span class="string">&quot;172.16.10.25:9302&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">discovery.zen.minimum_master_nodes:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;记录一下在安装-elastic-search-单机多节点是时候报错解决方案&quot;&gt;&lt;a href=&quot;#记录一下在安装-elastic-search-单机多节点是时候报错解决方案&quot; class=&quot;headerlink&quot; title=&quot;记录一下在安装 elastic-search 单机多节点是时候报错解决方案&quot;&gt;&lt;/a&gt;记录一下在安装 elastic-search 单机多节点是时候报错解决方案&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[2021-07-26T11:43:03,929][INFO ][o.e.d.z.ZenDiscovery     ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[node-2] failed to send join request to master [&amp;#123;node-1&amp;#125;&amp;#123;alKTwZlPRiWECIurrQVWXA&amp;#125;&amp;#123;qwbTz729TNajY6baHiruZA&amp;#125;&amp;#123;172.16.10.25&amp;#125;&amp;#123;172.16.10.25:9300&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;ml.machine_memory=17179869184, ml.max_open_jobs=20, xpack.installed=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, ml.enabled=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reason [RemoteTransportException[[node-1][172.16.10.25:9300][internal:discovery/zen/join]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nested: IllegalArgumentException&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[can&lt;span class=&quot;string&quot;&gt;&amp;#x27;t add node &amp;#123;node-2&amp;#125;&amp;#123;alKTwZlPRiWECIurrQVWXA&amp;#125;&amp;#123;8BoLzIHvRsuZLkYCbGd3jA&amp;#125;&amp;#123;172.16.10.25&amp;#125;&amp;#123;172.16.10.25:9301&amp;#125;&amp;#123;ml.machine_memory=17179869184, ml.max_open_jobs=20, xpack.installed=true, ml.enabled=true&amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;found existing node &amp;#123;node-1&amp;#125;&amp;#123;alKTwZlPRiWECIurrQVWXA&amp;#125;&amp;#123;qwbTz729TNajY6baHiruZA&amp;#125;&amp;#123;172.16.10.25&amp;#125;&amp;#123;172.16.10.25:9300&amp;#125;&amp;#123;ml.machine_memory=17179869184,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;xpack.installed=true, ml.max_open_jobs=20, ml.enabled=true&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;with the same id but is a different node instance]; ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;报错信息提示有相同的 id 但是是不同的实例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原因&lt;/strong&gt;是： 我把作为 master 的 elastic-search 文件复制了两份，导致数据也包含在了 作为 slave节点里面。&lt;/p&gt;
&lt;h3 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h3&gt;&lt;p&gt;删除复制的作为 slave 节点的 elastic-search 的data 文件夹即可。&lt;/p&gt;</summary>
    
    
    
    
    <category term="elasticsearch" scheme="http://example.com/tags/elasticsearch/"/>
    
    <category term="elasticstash" scheme="http://example.com/tags/elasticstash/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud中关于@EnableFeignClients注解的属性字段basePackages</title>
    <link href="http://example.com/2021/07/19/Spring-Cloud%E4%B8%AD%E5%85%B3%E4%BA%8E-EnableFeignClients%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%B1%9E%E6%80%A7%E5%AD%97%E6%AE%B5basePackages/"/>
    <id>http://example.com/2021/07/19/Spring-Cloud%E4%B8%AD%E5%85%B3%E4%BA%8E-EnableFeignClients%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%B1%9E%E6%80%A7%E5%AD%97%E6%AE%B5basePackages/</id>
    <published>2021-07-19T07:20:50.000Z</published>
    <updated>2021-08-14T01:30:53.522Z</updated>
    
    <content type="html"><![CDATA[<p>  一般情况下，我们在启动类上面添加**@EnableFeignClients**注解就是表明当前应用服务（我们称之为<code>服务A</code>）中有的地方想要引用其它应用服务（我们称之为<code>服务B</code>）中的接口。<br>  如果<code>服务B可以单独启动起来并且注册到注册中心</code>，则我们仅仅在服务A的启动类中添加<code>@EnableFeignClients</code>注解即可；如果<code>服务B没有单独启动起来</code>，而是以Jar包的形式被引入到服务A中，则服务A在启动的时候是不会主动去加载服务B中标注了@FeignClient注解的interface而去自动生成bean对象，这样我们在服务A中的Controller类中以如下这种方式去引入<code>使用服务B中的标注了@FeignClient注解的接口</code>是会报错的</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.bc.product.client.ProductClient;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductClient productClient;</span><br><span class="line"> </span><br><span class="line">    ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个时候就需要使用<code>basePackages</code>属性字段去指明应用程序A在启动的时候需要扫描服务B中的标注了@FeignClient注解的接口的包路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &#123;&quot;com.bc.product.client&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;  一般情况下，我们在启动类上面添加**@EnableFeignClients**注解就是表明当前应用服务（我们称之为&lt;code&gt;服务A&lt;/code&gt;）中有的地方想要引用其它应用服务（我们称之为&lt;code&gt;服务B&lt;/code&gt;）中的接口。&lt;br&gt;  如果&lt;code&gt;服务B可以单独启动起来并且注册到注册中心&lt;/code&gt;，则我们仅仅在服务A的启动类中添加&lt;code&gt;@EnableFeignClients&lt;/code&gt;注解即可；如果&lt;code&gt;服务B没有单独启动起来&lt;/code&gt;，而是以Jar包的形式被引入到服务A中，则服务A在启动的时候是不会主动去加载服务B中标注了@FeignClient注解的interface而去自动生成bean对象，这样我们在服务A中的Controller类中以如下这种方式去引入&lt;code&gt;使用服务B中的标注了@FeignClient注解的接口&lt;/code&gt;是会报错的&lt;/p&gt;</summary>
    
    
    
    
    <category term="spring-cloud" scheme="http://example.com/tags/spring-cloud/"/>
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>flutter 单元测试mockito的基本运用</title>
    <link href="http://example.com/2020/06/18/flutter-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95mockito%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%94%A8/"/>
    <id>http://example.com/2020/06/18/flutter-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95mockito%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%94%A8/</id>
    <published>2020-06-18T09:44:20.000Z</published>
    <updated>2021-08-14T01:30:53.524Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>web的单元测试好写，flutter的单元测试也好写，web的ui点击事件单元测试可以用jest全包，flutter的widget点击事件怎么模拟？</p></blockquote><span id="more"></span><h3 id="web和flutter单元测试的不同"><a href="#web和flutter单元测试的不同" class="headerlink" title="web和flutter单元测试的不同"></a>web和flutter单元测试的不同</h3><ul><li><p>如今react/vue的单元测试大家基本都用jest/enzyme了，确实好用，当我们mock的时候，jest会自动把待测试文件匹配的路径一同模拟。</p><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> api <span class="keyword">from</span> <span class="string">&#x27;@/services/api&#x27;</span>;</span><br><span class="line">jest.mock(<span class="string">&quot;@/services/api&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">auth</span>: &#123;</span><br><span class="line">            <span class="attr">token</span>: jest.fn(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(&#123; <span class="attr">data</span>: &#123; <span class="attr">info</span>: &#123;&#125; &#125;, <span class="attr">status</span>: <span class="string">&#x27;success&#x27;</span> &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>那我们不用去担心待测试文件方法调用，如果test文件调用api.auth.token()，肯定会返回**{ data: { info: {} }, status: ‘success’ }**</p></li><li><p>flutter的思想并不是这样的，mock不匹配路径，严格点说，和路径无关。flutter单元测试的中心思想很简单，和单元测试的思想是一致的，模拟依赖，各司其职。</p><p>首先flutter没有模拟路径的方法，那如何去解决api请求的问题呢，毕竟最大的难点就是这里。</p><p>对比两个代码段：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FLToastProvider(</span><br><span class="line">      defaults: _toastDefaults,</span><br><span class="line">      child: Builder(builder: (BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> MultiProvider(</span><br><span class="line">            providers: [</span><br><span class="line">              ChangeNotifierProvider&lt;DatetimeProvider&gt;(</span><br><span class="line">                  create: (_) =&gt; DatetimeProvider()),</span><br><span class="line">              ChangeNotifierProvider&lt;HealthProvider&gt;(</span><br><span class="line">                  create: (_) =&gt; HealthProvider(),</span><br><span class="line">            ],</span><br><span class="line">            child: widget.child</span><br><span class="line">        );</span><br><span class="line">      &#125;),</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FLToastProvider(</span><br><span class="line">      defaults: _toastDefaults,</span><br><span class="line">      child: Builder(builder: (BuildContext context) &#123;</span><br><span class="line">        return MultiProvider(</span><br><span class="line">            providers: [</span><br><span class="line">              ChangeNotifierProvider&lt;DatetimeProvider&gt;(</span><br><span class="line">                  create: (_) =&gt; DatetimeProvider()),</span><br><span class="line">              ChangeNotifierProvider&lt;HealthProvider&gt;(</span><br><span class="line">                  create: (_) =&gt; HealthProvider(api: healthApi)),</span><br><span class="line">            ],</span><br><span class="line">            child: widget.child</span><br><span class="line">        );</span><br><span class="line">      &#125;),</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>暂时把这个代码片段叫做makeTestableWidget，如上所示，原来我们的api依赖直接卸载provider里面，现在我们把它抽了出来，作为依赖传进去。这就是单元测试思想的体现。现在我们可以把我们模拟的依赖作为参数传进去，就可以去控制api请求的结果了。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MockHealthAPI</span> <span class="keyword">extends</span> <span class="title">Mock</span> <span class="keyword">implements</span> <span class="title">HealthApi</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> healthApi = MockHealthAPI();</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dosth...</span><br><span class="line">when(healthApi.getBloodPressureByGraph(&#123;<span class="string">&quot;category&quot;</span>: <span class="string">&quot;TIMES&quot;</span>, <span class="string">&quot;times&quot;</span>: <span class="number">7</span>,&#125;))</span><br><span class="line">      .thenReturn(GraphBpModel.fromJson(json.decode(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &#123;&quot;graphBp&quot;:&#123;&quot;time&quot;:[&#123;&quot;year&quot;:1592202572319,&quot;time&quot;:1592202572319&#125;,&#123;&quot;year&quot;:0,&quot;time&quot;:1591861014653&#125;,&#123;&quot;year&quot;:0,&quot;time&quot;:1591177545312&#125;],&quot;high&quot;:[110,110,121],&quot;low&quot;:[80,80,98],&quot;status&quot;:[&quot;NORMAL&quot;,&quot;NORMAL&quot;,&quot;NORMAL&quot;]&#125;,&quot;graphHeartRate&quot;:&#123;&quot;time&quot;:[&#123;&quot;year&quot;:1592202572319,&quot;time&quot;:1592202572319&#125;,&#123;&quot;year&quot;:0,&quot;time&quot;:1591861014653&#125;,&#123;&quot;year&quot;:0,&quot;time&quot;:1591177545312&#125;],&quot;heartRate&quot;:[60,60,72],&quot;status&quot;:[&quot;NORMAL&quot;,&quot;NORMAL&quot;,&quot;NORMAL&quot;]&#125;,&quot;bpLatest&quot;:&#123;&quot;high&quot;:96,&quot;low&quot;:68,&quot;bpStatus&quot;:&quot;NORMAL&quot;,&quot;heartRate&quot;:41,&quot;heartRateStatus&quot;:&quot;LOW&quot;,&quot;measuredAt&quot;:1591177056191590,&quot;year&quot;:null,&quot;referenceBpMax&quot;:140,&quot;referenceBpMin&quot;:90,&quot;referenceHeartRateMax&quot;:100,&quot;referenceHeartRateMin&quot;:47&#125;&#125;</span></span><br><span class="line"><span class="string">      &quot;&quot;&quot;</span>)));</span><br><span class="line">dosth...</span><br><span class="line">  <span class="keyword">await</span> tester.tap(BtnFinder);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    <span class="keyword">await</span> tester.pump();</span><br><span class="line"><span class="comment">//  检查 是否调用过</span></span><br><span class="line">    verify(healthApi.getBloodPressureByGraph(&#123;<span class="string">&quot;category&quot;</span>: <span class="string">&quot;TIMES&quot;</span>, <span class="string">&quot;times&quot;</span>: <span class="number">7</span>&#125;)).called(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>测试通过。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;web的单元测试好写，flutter的单元测试也好写，web的ui点击事件单元测试可以用jest全包，flutter的widget点击事件怎么模拟？&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="flutter" scheme="http://example.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>react hooks 组件的测试方法</title>
    <link href="http://example.com/2020/06/15/react-hooks-%E7%BB%84%E4%BB%B6%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2020/06/15/react-hooks-%E7%BB%84%E4%BB%B6%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/</id>
    <published>2020-06-15T09:03:34.000Z</published>
    <updated>2021-08-14T01:30:53.537Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>自从react-hooks出来以后，重构后的代码基本都适用hook了，和同事聊了几句，都说条理清楚了，写起来思路清楚一些，nice！但是我的instance上没有组件方法了，测试怎么办呢？</p></blockquote><span id="more"></span><p>很简单，简单来说有如下两种情况：</p><h3 id="事件有ui变化"><a href="#事件有ui变化" class="headerlink" title="事件有ui变化"></a>事件有ui变化</h3><p>那就用find方法去找事件前的ui，写一条断言；触发事件之后，找到现在的ui，再写一条断言去匹配即可。</p><h3 id="事件无ui变化"><a href="#事件无ui变化" class="headerlink" title="事件无ui变化"></a>事件无ui变化</h3><p>这种情况下多半是发出了api请求，那我们就mock api即可。</p><p>假如组件调用了“api.auth.token()”方法，那mock就如下写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> api <span class="keyword">from</span> <span class="string">&#x27;@/services/api&#x27;</span>;</span><br><span class="line"></span><br><span class="line">jest.mock(<span class="string">&quot;@/services/api&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">auth</span>: &#123;</span><br><span class="line">            <span class="attr">token</span>: jest.fn(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(&#123; <span class="attr">data</span>: &#123; <span class="attr">info</span>: &#123;&#125; &#125;, <span class="attr">status</span>: <span class="string">&#x27;success&#x27;</span> &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;自从react-hooks出来以后，重构后的代码基本都适用hook了，和同事聊了几句，都说条理清楚了，写起来思路清楚一些，nice！但是我的instance上没有组件方法了，测试怎么办呢？&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="hooks" scheme="http://example.com/tags/hooks/"/>
    
    <category term="测试方法" scheme="http://example.com/tags/%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>flutter provider中函数的形参问题</title>
    <link href="http://example.com/2020/06/02/flutter-provider%E4%B8%AD%E5%87%BD%E6%95%B0%E7%9A%84%E5%BD%A2%E5%8F%82%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/06/02/flutter-provider%E4%B8%AD%E5%87%BD%E6%95%B0%E7%9A%84%E5%BD%A2%E5%8F%82%E9%97%AE%E9%A2%98/</id>
    <published>2020-06-02T10:26:07.000Z</published>
    <updated>2021-08-14T01:30:53.524Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatetimeProvider</span> <span class="title">with</span> <span class="title">ChangeNotifier</span> </span>&#123;</span><br><span class="line">  <span class="built_in">DateTime</span> datetime  = <span class="built_in">DateTime</span>.now();</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">void</span> setDatetime(<span class="built_in">DateTime</span> datetime) &#123;</span><br><span class="line">    datetime = datetime;</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调试过程中，调用setDatetime，无论传入任何的datetime，原datetime都不会改变。</p><p>原因：函数的形参和定义的属性同名，函数执行时，没有用到我们传入的参数，一直自身赋值自身…</p><p>修复：改变参数名称，将setDatetime(DateTime datetime)改为setDatetime(DateTime newDatetime)即可…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
    <category term="flutter" scheme="http://example.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>canvas 字体颜色设置顺序</title>
    <link href="http://example.com/2020/05/19/canvas-%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E8%AE%BE%E7%BD%AE%E9%A1%BA%E5%BA%8F/"/>
    <id>http://example.com/2020/05/19/canvas-%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E8%AE%BE%E7%BD%AE%E9%A1%BA%E5%BA%8F/</id>
    <published>2020-05-19T07:34:19.000Z</published>
    <updated>2021-08-14T01:30:53.523Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上星期在小程序中使用echarts画图，真机体验太卡，四五次情况下就会卡住一次渲染不出来。切换到uni-app推荐的ucharts后，稍微修改下源码，就可以添加自己需要的功能和样式。其中字体的问题，比较有意思，记录一下。</p></blockquote><span id="more"></span><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>我们折线图上的点和数值需要自定义颜色，比如y轴数值90，这个在折线图上需要显示绿色的圆点和绿色的90文本。将颜色传过去后，点颜色是对的，但是数值的颜色不对，总是相邻的上一个的数值的颜色。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>经过重重查找筛选后，将问题集中大到“drawPointText”方法中，原始的canvas的文字绘制步骤是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.setFontSize(fontsize);</span><br><span class="line">context.fillText(text);</span><br><span class="line">context.setFillStyle(color);</span><br><span class="line">context.stroke();</span><br><span class="line">context.closePath();</span><br></pre></td></tr></table></figure><p>在其他地方无明显错误的情况下，将绘制的顺序修改如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.setFontSize(fontsize);</span><br><span class="line">context.setFillStyle(color);</span><br><span class="line">context.fillText(text);</span><br><span class="line">context.stroke();</span><br><span class="line">context.closePath();</span><br></pre></td></tr></table></figure><p>将<strong>fillText</strong>移到最后，文本的绘制就正常了。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>和html/css分工合作不同，canvas对绘制的顺序还是有一定要求的。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;上星期在小程序中使用echarts画图，真机体验太卡，四五次情况下就会卡住一次渲染不出来。切换到uni-app推荐的ucharts后，稍微修改下源码，就可以添加自己需要的功能和样式。其中字体的问题，比较有意思，记录一下。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="canvas" scheme="http://example.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>uni-app vendor.js过大的问题</title>
    <link href="http://example.com/2020/05/13/uni-app-vendor-js%E8%BF%87%E5%A4%A7%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/05/13/uni-app-vendor-js%E8%BF%87%E5%A4%A7%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-05-13T02:50:55.000Z</published>
    <updated>2021-08-14T01:30:53.538Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>年后和小伙伴们开始开发小程序，随着小程序功能逐渐丰富，代码越来越大，我们也开始使用分包来减少主包的文件体积，但是因为我们是使用uni-app来开发的，vendor.js 主文件承担了主要的代码逻辑，所以需要找到方法来优化一下。</p></blockquote><span id="more"></span><h3 id="启用分包"><a href="#启用分包" class="headerlink" title="启用分包"></a>启用分包</h3><ol><li><p>在src根目录中新建pagesA文件夹</p></li><li><p>在pages.json加入下面代码</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;subPackages&quot;</span> [</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attr">&quot;root&quot;</span>: <span class="string">&quot;pageA&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;pages&quot;</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attr">&quot;path&quot;</span>: &#x27;页面相对pagesA地址： page-demo/page-demo&#x27;,</span><br><span class="line">  <span class="attr">&quot;style&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;navigationBarTitleText&quot;</span>: <span class="string">&quot;title&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">  ],</span><br><span class="line"><span class="string">&quot;preloadRule&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;pages/some-page/some-page&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;network&quot;</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;packages&quot;</span>: [<span class="string">&quot;pagesA&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分包的配置和主pages配置基本一致，只是上面包裹了一个字段，下面的preloadRule告诉小程序，我们打开some-page页面的时候，需要预加载“pagesA”分包，优化用户体验。</p><h3 id="优化分包"><a href="#优化分包" class="headerlink" title="优化分包"></a>优化分包</h3><p>配置uni-app的manifest.json的“mp-weixin”字段</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;optimization&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;subPackages&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就开启了分包优化。</p><p>大致意思是如果一个文件或组件只在分包页面中使用，那文件就打包在分包中。如果在多个分包或主包中使用，那代码就会打包在主包中。</p><h3 id="启动命令优化"><a href="#启动命令优化" class="headerlink" title="启动命令优化"></a>启动命令优化</h3><p>官方指引：</p><ul><li><code>cli</code>创建的项目可以在<code>pacakge.json</code>中添加参数<code>--minimize</code>，示例：<code>&quot;dev:mp-weixin&quot;: &quot;cross-env NODE_ENV=development UNI_PLATFORM=mp-weixin vue-cli-service uni-build --watch --minimize&quot;</code></li></ul><p>这样的话，就在开发环境开启了代码压缩，立竿见影，代码压缩了50%左右。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;年后和小伙伴们开始开发小程序，随着小程序功能逐渐丰富，代码越来越大，我们也开始使用分包来减少主包的文件体积，但是因为我们是使用uni-app来开发的，vendor.js 主文件承担了主要的代码逻辑，所以需要找到方法来优化一下。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="uni-app" scheme="http://example.com/tags/uni-app/"/>
    
  </entry>
  
  <entry>
    <title>osx 安装 mariadb</title>
    <link href="http://example.com/2020/05/01/osx-%E5%AE%89%E8%A3%85-mariadb/"/>
    <id>http://example.com/2020/05/01/osx-%E5%AE%89%E8%A3%85-mariadb/</id>
    <published>2020-05-01T09:04:52.000Z</published>
    <updated>2021-08-14T01:30:53.529Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mariadb</span><br></pre></td></tr></table></figure><h3 id="启动-停止"><a href="#启动-停止" class="headerlink" title="启动/停止"></a>启动/停止</h3><p>启动/停止 mariadb 有两种方式，按需选择其中一种就可以：</p><ol><li>方式一： 通过brew启动/停止，<br>这种方法可以跟随系统启动（改plist那些操作麻烦并且会造成不稳定因素）<br>启动：brew services start mariadb<br>停止：brew services stop mariadb</li><li>方式二： 通过mysql.server，这个不能够跟随系统启动，每次重启MAC需要手动运行<br>启动：mysql.server start<br>停止：mysql.server stop</li></ol><span id="more"></span><h3 id="初始化mariadb-mysql"><a href="#初始化mariadb-mysql" class="headerlink" title="初始化mariadb(mysql)"></a>初始化mariadb(mysql)</h3><ol><li>初始化数据库，将数据库信息安装上去</li></ol><p>  sudo mysql_install_db<br>  可能有的人会提示已经安装，不管它，跑一次这个。</p><ol start="2"><li>初始化root账号及数据库各种设定<br>这一步很重要，下面会列出所有需要设置的选项，运行：</li></ol><p>  sudo mysql_secure_installation</p><p><strong>运行之后会进行初始化引导，每一步都有详细的说明。</strong><br><strong>下面列出每个选项的翻译，根据自己需要配置：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Enter current password <span class="keyword">for</span> root (enter <span class="keyword">for</span> none): &lt;– 初次运行直接回车</span><br><span class="line">…</span><br><span class="line">Set root password? [Y/n] &lt;– 是否设置root用户密码，建议设置，输入Y按回车</span><br><span class="line">…</span><br><span class="line">New password: &lt;– 设置root用户的密码</span><br><span class="line">Re-enter new password: &lt;– 再输入一次你设置的root的密码</span><br><span class="line">…</span><br><span class="line">Remove anonymous users? [Y/n] &lt;– 是否删除匿名用户，建议删除，Y删除，n不删除</span><br><span class="line">…</span><br><span class="line">Disallow root login remotely? [Y/n] &lt;– 是否禁止root远程登录，按需配置，Y禁止远程登录，n开启远程登录</span><br><span class="line">…</span><br><span class="line">Remove <span class="built_in">test</span> database and access to it? [Y/n] &lt;– 是否删除<span class="built_in">test</span>数据库，Y删除、n留着</span><br><span class="line">…</span><br><span class="line">Reload privilege tables now? [Y/n]&lt;– 是否重新加载权限表，建议重新加载，Y重新加载，n不重新加载</span><br><span class="line">…</span><br><span class="line">All <span class="keyword">done</span>! If you’ve completed all of the above steps, your MariaDB</span><br><span class="line">installation should now be secure.</span><br><span class="line">Thanks <span class="keyword">for</span> using MariaDB!</span><br></pre></td></tr></table></figure><p>通过这个就可以配置好mariadb。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install mariadb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;启动-停止&quot;&gt;&lt;a href=&quot;#启动-停止&quot; class=&quot;headerlink&quot; title=&quot;启动/停止&quot;&gt;&lt;/a&gt;启动/停止&lt;/h3&gt;&lt;p&gt;启动/停止 mariadb 有两种方式，按需选择其中一种就可以：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方式一： 通过brew启动/停止，&lt;br&gt;这种方法可以跟随系统启动（改plist那些操作麻烦并且会造成不稳定因素）&lt;br&gt;启动：brew services start mariadb&lt;br&gt;停止：brew services stop mariadb&lt;/li&gt;
&lt;li&gt;方式二： 通过mysql.server，这个不能够跟随系统启动，每次重启MAC需要手动运行&lt;br&gt;启动：mysql.server start&lt;br&gt;停止：mysql.server stop&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="mariadb" scheme="http://example.com/tags/mariadb/"/>
    
  </entry>
  
</feed>
